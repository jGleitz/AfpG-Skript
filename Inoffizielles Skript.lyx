#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
\usepackage{tikz}
\usepackage{tkz-graph}
\usetikzlibrary{calc}
\usetikzlibrary{decorations.pathreplacing}

\usepackage[tocfullflat]{tocstyle}
\deactivatetocstyle[toc]
\usetocstyle{standard}
\settocfeature{entryhook}{\large}
\settocfeature{entryvskip}{1\baselineskip plus .2pt}

\makeatletter
\newcommand\listpropositionname{\chapter*{Verzeichnis der Sätze}\vspace{-2em}}
\newcommand\listofpropositions{%
  \section*{\listpropositionname}\@starttoc{lem}}
\makeatother


\renewcommand*{\VertexSmallMinSize}{20pt}

% All Vertices in Math Mode
\tikzset{VertexStyle/.append style={execute at begin node=$, execute at end node=$}}


\definecolor{scndcolor}{gray}{0.8}
\definecolor{thrdcolor}{gray}{0.4}

\usepackage{theoremref}

%\usepackage{breqn}
\usepackage{mdframed}

  
\usepackage{xstring}

\newenvironment{planargraphtheorem}{\begin{samepage}}{\end{samepage}}

% Formatierung der verschiedenen Theorem-Umgebungen

% Formatierung für Sätze
\newmdenv[
linewidth=2pt,
linecolor=black,
innertopmargin=-3pt,
skipabove=8mm,
skipbelow=6mm,
leftmargin=4mm,
hidealllines=true,
leftline=true,
nobreak=true
]{propstyle}


\let\oldprop\prop
\renewenvironment{prop}[1][]%
{%
\begin{planargraphtheorem}\begin{propstyle}
\IfEndWith{#1}{|hide}{\begin{oldprop}[]}{\begin{oldprop}[#1]}
\StrDel{#1}{|hide}[\listtitle]
\addcontentsline{lem}{section}{\listtitle}
} {%
\end{oldprop}
\end{propstyle}
\end{planargraphtheorem}
}%



% Formatierung für Lemmata
\newmdenv[
linewidth=2pt,
linecolor=gray,
innertopmargin=-3pt,
skipabove=4mm,
skipbelow=3mm,
leftmargin=4mm,
hidealllines=true,
leftline=true,
nobreak=true
]{lemstyle}

\let\oldlem\lem
\renewenvironment{lem}
  	{\begin{planargraphtheorem}\begin{lemstyle}\begin{oldlem}}
{\end{oldlem}\end{lemstyle}\end{planargraphtheorem}}

\catcode`\*=11
\let\oldlems\lem*
\catcode`\*=12
\renewenvironment{lem*}
{\begin{planargraphtheorem}\begin{lemstyle}\begin{oldlems}}
{\end{oldlems}\end{lemstyle}\end{planargraphtheorem}}

% Formatierung für Definitionen
\newmdenv[
linewidth=1pt,
linecolor=black,
innertopmargin=0mm,
innerbottommargin=3mm,
skipabove=5mm,
skipbelow=5mm,
hidealllines=true,
topline=true,
bottomline=true,
nobreak=true
]{defnstyle}

\LetLtxMacro\olddefn\defn
\renewenvironment{defn}
{\begin{planargraphtheorem}\begin{defnstyle}\begin{olddefn}}
{\end{olddefn}\end{defnstyle}\end{planargraphtheorem}}

\catcode`\*=11
\LetLtxMacro\olddefns\defn*
\catcode`\*=12
\renewenvironment{defn*}
{\begin{planargraphtheorem}\begin{defnstyle}\begin{olddefns}}
{\end{olddefns}\end{defnstyle}\end{planargraphtheorem}}


\LetLtxMacro\oldproblem\problem
\renewenvironment{problem}[1][]
{\begin{planargraphtheorem}\begin{oldproblem}[#1]\index{#1}}
{\end{oldproblem}\end{planargraphtheorem}}


% Abstände für Paragraphen und Unterpargraphen
\RedeclareSectionCommands[
beforeskip=-.7\baselineskip,
afterskip=1sp
]{paragraph}
\RedeclareSectionCommands[
beforeskip=.7\baselineskip,
afterskip=-1em
]{subparagraph}


% Abstände für Listen
\setlist[itemize]{
topsep=0.4\baselineskip,
parsep=0.1\baselineskip,
itemsep=0.1\baselineskip,
after=\vspace{.1\baselineskip}
}
\setlist[enumerate]{
topsep=0.4\baselineskip,
parsep=0.1\baselineskip,
itemsep=0.1\baselineskip,
after=\vspace{.1\baselineskip}
}

% Farben zum Einfärben von Graphen
\usepackage{xcolor}
\definecolor{color1}{named}{red}
\definecolor{color2}{named}{green}
\definecolor{color3}{named}{cyan}
\definecolor{color4}{named}{brown}
\definecolor{color5}{named}{yellow}


% Nummeriere Abbildugen nach Kapitel
\numberwithin{figure}{chapter} 
% Formatierung für Abbildungen
\addtokomafont{captionlabel}{\small\sffamily}
\addtokomafont{caption}{\small}
\usepackage{caption}
\DeclareCaptionLabelSeparator{withvspace}{\\\vspace{.1\baselineskip}}
\captionsetup{
format=plain,
labelsep=withvspace,
justification=centerlast,
skip=\baselineskip,
position=below,
margin=7mm
}

% Vermeidung von Hurenkindern und Schusterjungen
\usepackage[all]{nowidow}

% QED-Symbol
\renewcommand{\qedsymbol}{\(\blacksquare\)}
\newcommand{\smallqed}{\renewcommand{\qedsymbol}{\(\square\)}}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Color nodes with two colors. 
% Code taken from
% http://tex.stackexchange.com/questions/55594/tikz-two-colored-circle-split
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\tikzset{circle split part fill/.style  args={#1,#2}{%
 alias=tmp@name, % Jake's idea !!
  postaction={%
    insert path={
     \pgfextra{% 
     \pgfpointdiff{\pgfpointanchor{\pgf@node@name}{center}}%
                  {\pgfpointanchor{\pgf@node@name}{east}}%            
     \pgfmathsetmacro\insiderad{\pgf@x}
      \fill[#1] (\pgf@node@name.base) ([xshift=-\pgflinewidth]\pgf@node@name.east) arc
                          (0:180:\insiderad-\pgflinewidth)--cycle;
      \fill[#2] (\pgf@node@name.base) ([xshift=\pgflinewidth]\pgf@node@name.west)  arc
                           (180:360:\insiderad-\pgflinewidth)--cycle;          
         }}}}}  




% Geklauter Code für Gitter in tikz-Zeichnungen
\makeatletter
\def\grd@save@target#1{%
  \def\grd@target{#1}}
\def\grd@save@start#1{%
  \def\grd@start{#1}}
\tikzset{
  grid with coordinates/.style={
    to path={%
      \pgfextra{%
        \edef\grd@@target{(\tikztotarget)}%
        \tikz@scan@one@point\grd@save@target\grd@@target\relax
        \edef\grd@@start{(\tikztostart)}%
        \tikz@scan@one@point\grd@save@start\grd@@start\relax
        \draw[minor help lines] (\tikztostart) grid (\tikztotarget);
        \draw[major help lines] (\tikztostart) grid (\tikztotarget);
        \grd@start
        \pgfmathsetmacro{\grd@xa}{\the\pgf@x/1cm}
        \pgfmathsetmacro{\grd@ya}{\the\pgf@y/1cm}
        \grd@target
        \pgfmathsetmacro{\grd@xb}{\the\pgf@x/1cm}
        \pgfmathsetmacro{\grd@yb}{\the\pgf@y/1cm}
        \pgfmathsetmacro{\grd@xc}{\grd@xa + \pgfkeysvalueof{/tikz/grid with coordinates/major step}}
        \pgfmathsetmacro{\grd@yc}{\grd@ya + \pgfkeysvalueof{/tikz/grid with coordinates/major step}}
        \foreach \x in {\grd@xa,\grd@xc,...,\grd@xb}
        \node[anchor=north] at (\x,\grd@ya) {\pgfmathprintnumber{\x}};
        \foreach \y in {\grd@ya,\grd@yc,...,\grd@yb}
        \node[anchor=east] at (\grd@xa,\y) {\pgfmathprintnumber{\y}};
      }
    }
  },
  minor help lines/.style={
    help lines,
    step=\pgfkeysvalueof{/tikz/grid with coordinates/minor step}
  },
  major help lines/.style={
    help lines,
    line width=\pgfkeysvalueof{/tikz/grid with coordinates/major line width},
    step=\pgfkeysvalueof{/tikz/grid with coordinates/major step}
  },
  grid with coordinates/.cd,
  minor step/.initial=.2,
  major step/.initial=1,
  major line width/.initial=2pt,
}
\makeatother

\makeatletter 
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
theorems-ams-bytype
theorems-ams-extended-bytype
algorithm2e
enumitem
\end_modules
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "Mitschrieb Algorithmen für planare Graphen"
\pdf_author "Joshua Gleitze"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 2
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 0 0 0 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Algorithmen für planaren Graphen
\end_layout

\begin_layout Subtitle
Mitschrieb der Vorlesung von Prof.
 Dr.
 Dorothea Wagner am KIT im Sommersemester 2016
\end_layout

\begin_layout Author
Joshua Gleitze
\end_layout

\begin_layout Address
Dieses Skript wird in einem GitHub-Repository unter 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/jGleitz/AfpG-Skript"

\end_inset

 entwickelt.
 Es ist noch nicht fertig und enthält sicherlich noch Fehler.
 Jeder Beitrag (auch nur die Information über einen Fehler) ist herzlich
 willkommen!
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\O}[1]{\mathcal{O}\left(#1\right)}
{\mathcal{O}\left(#1\right)}
\end_inset


\begin_inset FormulaMacro
\newcommand{\dist}[1]{\text{dist}\left(#1\right)}
{\text{dist}\left(#1\right)}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\NP}{\mathcal{NP}}
{\mathcal{NP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{gobble}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
listofpropositions
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Einführung
\end_layout

\begin_layout Standard
Diese Vorlesung handelt meist von einem ungerichteten, einfachen Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ohne Schlingen.
 Kann man 
\begin_inset Formula $G$
\end_inset

 so zeichnen, dass sich keine seiner Kanten kreuzen, so bezeichnet man 
\begin_inset Formula $G$
\end_inset

 als planar.
 Dies wird im Folgenden formal definiert.
\end_layout

\begin_layout Standard
Prinzipiell kann ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 dargestellt werden indem man seine Knoten 
\begin_inset Formula $v\in V$
\end_inset

 auf Punkte in 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

 und seine Kanten 
\begin_inset Formula $e\in E$
\end_inset

 auf Jordan-Kurven in 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

, die die entsprechenden Punkte verbinden, abbildet.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Jordan-Kurve
\end_layout

\end_inset

Eine stetige, sich nicht selbst kreuzende Kurve heißt 
\noun on
Jordan-Kurve
\noun default
.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Notation*
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{n}$
\end_inset


\end_layout

\end_inset


\begin_inset Formula $K_{n}=\left(V,E\right)$
\end_inset

 bezeichnet den vollständigen Graph mit 
\begin_inset Formula $\left|V\right|=n$
\end_inset

 und 
\begin_inset Formula 
\[
E=\left\{ \left\{ u,v\right\} \mid u,v\in V\land u\neq v\right\} 
\]

\end_inset


\end_layout

\begin_layout Notation*
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{n,m}$
\end_inset


\end_layout

\end_inset


\begin_inset Formula $K_{n,m}=\left(V,E\right)$
\end_inset

 bezeichnet den vollständig bipartiten Graph mit 
\begin_inset Formula $V=V_{1}\varoplus V_{2}$
\end_inset

, 
\begin_inset Formula $\left|V_{1}\right|=n$
\end_inset

, 
\begin_inset Formula $\left|V_{2}\right|=m$
\end_inset

 und
\begin_inset Formula 
\[
E=\left\{ \left\{ v_{1},v_{2}\right\} \mid v_{1}\in V_{1}\land v_{2}\in V_{2}\right\} 
\]

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
planar
\end_layout

\end_inset

Ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 heißt 
\noun on
planar,
\noun default
 falls es eine Darstellung von 
\begin_inset Formula $G$
\end_inset

 in 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

 gibt, bei der sich keine zwei Kanten kreuzen.
 Das heißt, dass die Jordan-Kurven, die die Kanten darstellen, sich nur
 in Endpunkten berühren.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=0,d=0]{1}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{scope}[rotate=90]
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices{circle}{2,3,4}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(1,2,3,4,1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(1)(3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(2)(4)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset space \hspace{}
\length 20mm
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex{1}
\end_layout

\begin_layout Plain Layout

	
\backslash
WE(1){2}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(1){3}
\end_layout

\begin_layout Plain Layout

	
\backslash
NO(1){4}
\end_layout

\begin_layout Plain Layout

	
\backslash
SO(1){5}
\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{scndcolor}{4,5}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(1)(4)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(2)(4)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(3)(4)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(1)(5)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(2)(5)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(3)(5)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{4}$
\end_inset

 und 
\begin_inset Formula $K_{2,3}$
\end_inset

 sind planar.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proposition
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{k5-nicht-planar}
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{5}$
\end_inset

 ist nicht planar|hide
\end_layout

\end_inset


\begin_inset Formula $K_{5}$
\end_inset

 ist nicht planar.
\end_layout

\begin_layout Proof
Sei o.B.d.A 
\begin_inset Formula $V\coloneqq\left\{ 1,2,3,4,5\right\} $
\end_inset

.
 Bette die Knoten und alle zu 
\begin_inset Formula $1$
\end_inset

 inzidenten Kanten beliebig in die Ebene ein.
 Dann existieren zwei Knoten (hier o.B.d.A.
 
\begin_inset Formula $2$
\end_inset

 und 
\begin_inset Formula $4$
\end_inset

), sodass der Kreis 
\begin_inset Formula $C\coloneqq\left\{ \left\{ 4,1\right\} ,\left\{ 1,2\right\} ,\left\{ 2,4\right\} \right\} $
\end_inset

 die Ebene in zwei Teile teilt: 
\begin_inset Formula $\text{Äußeres}\left(C\right)$
\end_inset

 und 
\begin_inset Formula $\text{Inneres}\left(C\right)$
\end_inset

, wobei 
\begin_inset Formula $3\in\text{Inneres}\left(C\right)$
\end_inset

 und 
\begin_inset Formula $5\in\text{Äußeres}\left(C\right)$
\end_inset

.
 Jede Kante zwischen Innerem und Äußerem von 
\begin_inset Formula $C$
\end_inset

 muss den Rand von 
\begin_inset Formula $C$
\end_inset

 kreuzen.
 Die Kante 
\begin_inset Formula $\left\{ 3,5\right\} $
\end_inset

 kann also nicht kreuzungsfrei gezogen werden (Jordan’scher Kurvensatz).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{1}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=45,d=3]{2}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=135,d=2]{5}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=225,d=3]{4}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=315,d=2]{3}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={ultra thick}](1)(2)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(1)(3)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={ultra thick}](1)(4)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(1)(5)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={dotted,bend right=45}](3)(5)
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(4)!0.5!(3)$) {
\backslash
footnotesize$
\backslash
text{Inneres}
\backslash
left(
\backslash
boldsymbol{C}
\backslash
right)$};
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(4)!0.5!(5) - (.5,0)$) {
\backslash
footnotesize$
\backslash
text{Äußeres}
\backslash
left(C
\backslash
right)$};
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(2)!0.5!(1) + (0,.5)$) {
\backslash
textbf{$C$}};
\end_layout

\begin_layout Plain Layout


\backslash
path [use as bounding box] ($(2) + (.6,0)$) rectangle ($(4) - (0,.6)$);
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={ultra thick,bend left=75,looseness=1.5}](2)(4)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
In 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{k5-nicht-planar}
\end_layout

\end_inset

 teilt 
\begin_inset Formula $C$
\end_inset

 die Ebene in zwei Gebiete.
 Die Kante 
\begin_inset Formula $\left\{ 3,5\right\} $
\end_inset

 kann nicht kreuzungsfrei gezogen werden.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{3,3}$
\end_inset

 ist nicht planar|hide
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{k33-nicht-planar}
\end_layout

\end_inset


\begin_inset Formula $K_{3,3}$
\end_inset

 ist nicht planar.
\end_layout

\begin_layout Proof
Seien o.B.d.A.
 
\begin_inset Formula $V=\left\{ 1,2,3,\text{a},\text{b},\text{c}\right\} $
\end_inset

.
 Bette den Kreis 
\begin_inset Formula $C$
\end_inset

 der Knoten 
\begin_inset Formula $\left\{ 1,\text{a},2,\text{b},3,\text{c}\right\} $
\end_inset

 kreuzungsfrei in die Ebene ein.
 Wird o.B.d.A.
 
\begin_inset Formula $\left\{ 1,\text{b}\right\} $
\end_inset

 durch das Innere von 
\begin_inset Formula $C$
\end_inset

 gezogen, so muss 
\begin_inset Formula $\left\{ 2,\text{c}\right\} $
\end_inset

 durch das Äußere von 
\begin_inset Formula $C$
\end_inset

 gezogen werden.
 Sei 
\begin_inset Formula $D\coloneqq\left\{ \left\{ 1,\text{c}\right\} ,\left\{ \text{c},2\right\} ,\left\{ 2,\text{b}\right\} ,\left\{ \text{b},1\right\} \right\} $
\end_inset

.
 Dann ist 
\begin_inset Formula $3\in\text{Inneres}\left(D\right)$
\end_inset

 und 
\begin_inset Formula $\text{a}\in\text{Äußeres}\left(D\right)$
\end_inset

.
 Die verbleibende Kante 
\begin_inset Formula $\left\{ 3,\text{a}\right\} $
\end_inset

 kann also nicht kreuzungsfrei gezogen werden.
\end_layout

\begin_layout Proof
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{3}
\end_layout

\begin_layout Plain Layout


\backslash
Vertices{circle}{1,a,2,b,3,c}
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={ultra thick}](2,b,1,c)
\end_layout

\begin_layout Plain Layout


\backslash
Edges(2,a,1)
\end_layout

\begin_layout Plain Layout


\backslash
Edges(b,3,c)
\end_layout

\begin_layout Plain Layout


\backslash
path [use as bounding box] ($(a)$) rectangle ($(3) - (2.8,1.3)$);
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend right=100,looseness=2.3,ultra thick}](2)(c)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={dotted}](3)(a)
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(b)!0.5!(a)$) {
\backslash
scriptsize$
\backslash
text{Äußeres}
\backslash
left(D
\backslash
right)$};
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(3)!0.5!(1)$) {
\backslash
scriptsize$
\backslash
text{Inneres}
\backslash
left(D
\backslash
right)$};
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(2) - (1.5,.4)$) {$
\backslash
boldsymbol{D}$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
In 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{k33-nicht-planar}
\end_layout

\end_inset

 kann die Kante 
\begin_inset Formula $\left\{ 3,\text{a}\right\} $
\end_inset

 nicht kreuzungsfrei gezogen werden, da sie 
\begin_inset Formula $D$
\end_inset

 überqueren müsste.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Corollary*
Es gibt Graphen, die nicht planar sind.
\end_layout

\begin_layout Chapter
Grundlegende Eigenschaften planarer Graphen
\end_layout

\begin_layout Section
Der Dualgraph
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Einbettung!planare
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Einbettung!kombinatorische
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Einbettung!geometrische
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Facette
\end_layout

\end_inset

Die planare Darstellung oder 
\noun on
Einbettung
\noun default
 von 
\begin_inset Formula $G$
\end_inset

 zerlegt die Ebene in 
\noun on
Facetten
\noun default
 (auch 
\noun on
Gebiete
\noun default
, 
\noun on
Flächen
\noun default
).
 Eine planare Einbettung, die durch Facetten bzw.
 die Reihenfolge der Adjazenzlisten der Knoten induziert wird, heißt 
\noun on
kombinatorische Einbettung
\noun default
.
 Ist die Einbettung mit Koordinaten der Knote und Kanten gegeben, so heißt
 sie 
\noun on
geometrische Einbettung
\noun default
.
\end_layout

\begin_layout Standard
Ein planarer Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 kann durch die Facettenmenge 
\begin_inset Formula $\mathcal{F}$
\end_inset

 bezeichnet werden.
 Hierbei ist es ausreichend, 
\begin_inset Formula $\mathcal{F}$
\end_inset

 durch die Auflistung der Anzahl der an jede Facette grenzenden Kanten anzugeben.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	%
\backslash
draw (-6,-2) to[grid with coordinates] (2,4);
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{3}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{scope}[rotate=45]
\end_layout

\begin_layout Plain Layout

		
\backslash
Vertices{square}{2,3,4,5}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE(4){1}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA(3){6}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(4,3,2,5,4,1,5)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(2,6,3)
\end_layout

\begin_layout Plain Layout

	
\backslash
path [use as bounding box] (-5.5,4) rectangle (1.5,-1);
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={in=90,out=135,looseness=1.2}](3)(1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={in=-90,out=-135,looseness=1.2}](2)(1)
\end_layout

\begin_layout Plain Layout

	
\backslash
small
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-2,3.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-3.5,1.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-2,-0.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-1.5,1.5) {4};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (0.5,1.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-5.2,1.5) {4};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

%	
\backslash
draw (-6,-2) to[grid with coordinates] (2,4);
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{3}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{scope}[rotate=45]
\end_layout

\begin_layout Plain Layout

		
\backslash
Vertices{square}{2,3,4,5}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE(4){1}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE(3){6}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(4,3,2,5,4,1,5)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(2,6,3)
\end_layout

\begin_layout Plain Layout

	
\backslash
path [use as bounding box] (-4.5,4) rectangle (.5,-1);
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={in=90,out=135,looseness=1.2}](3)(1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={in=-90,out=-135,looseness=1.2}](2)(1)
\end_layout

\begin_layout Plain Layout

	
\backslash
small
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-2,3.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-3.5,1.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-2,-0.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-.5,1.5) {3};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-2.5,1.5) {5};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (0.5,1.5) {3};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Der selbe Graph mit unterschiedlichen kombinatorischen Einbettungen.
 Kanten pro Facette links: 3,3,3,3,4,4; rechts: 3,3,3,3,3,5.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Dualgraph
\end_layout

\end_inset

Zu einem Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 mit einer planaren Einbettung und einer Menge 
\begin_inset Formula $\mathcal{F}$
\end_inset

 der entsprechenden Facetten ist der 
\noun on
Dualgraph 
\begin_inset Formula $G^{*}=\left(V^{*},E^{*}\right)$
\end_inset


\noun default
 definiert durch
\end_layout

\begin_deeper
\begin_layout Itemize
Für jede Facette 
\begin_inset Formula $f\in\mathcal{F}$
\end_inset

 existiere 
\begin_inset Formula $v_{f}\in V^{*}$
\end_inset


\end_layout

\begin_layout Itemize
Zu jeder Kante 
\begin_inset Formula $e=\left\{ u,v\right\} \in E$
\end_inset

 existiere die 
\noun on
Dualkante 
\noun default

\begin_inset Formula $e^{*}\in E^{*}$
\end_inset

 die die beiden/den Knoten aus 
\begin_inset Formula $V^{*}$
\end_inset

 verbindet an deren/dessen Facetten aus 
\begin_inset Formula $\mathcal{F}$
\end_inset

 
\begin_inset Formula $e$
\end_inset

 angrenzt.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle={Hasse}]
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=-1,y=0]{1}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=1,y=1]{2}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=1,y=-1]{3}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=3,y=1]{4}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=3,y=-1]{5}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=5,y=1]{6}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(2,3,1,2,4,5,3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(4)(6)
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{VertexStyle/.append style={fill=thrdcolor,draw=thrdcolor,minimum
 size=15pt}}
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{EdgeStyle/.append style={draw=thrdcolor}}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=0.3,y=0]{d1}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=2,y=0]{d2}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=6,y=0]{d3}
\end_layout

\begin_layout Plain Layout

	
\backslash
path [use as bounding box] ($(1) - (0,2.4)$) rectangle ($(d3) + (.6,2.4)$);
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(d1)(d2)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(d2)(d3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={bend left,out=120,in=45,looseness=1.6}](d1)(d3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={bend right,out=-120,in=-45,looseness=1.6}](d1)(d3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={bend left, out=110, in=67.5,looseness=1.5}](d2)(d3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={bend right, out=-110, in=-67.5,looseness=1.5}](d2)(d3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Loop[style={-,out=110,in=160,min distance=75}](d3)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ein Graph und sein Dualgraph
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Remark*
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Eigenschaften des Dualgraphen
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Der Dualgraph eines einfachen Graphen ist nicht notwendigerweise einfach.
\end_layout

\begin_layout Itemize
Der Dualgraph zu 
\begin_inset Formula $G$
\end_inset

 hängt von der Einbettung von 
\begin_inset Formula $G$
\end_inset

 ab.
 Dualgraphen des selben Graphens basierend auf unterschiedlichen Einbettungen
 können verschieden (also nicht isomorph) sein.
\end_layout

\begin_layout Itemize
Der Dualgraph zu einem planaren Graph 
\begin_inset Formula $G$
\end_inset

 (mit planarer Einbettung 
\begin_inset Formula $\mathcal{F}$
\end_inset

) ist wieder planar.
\end_layout

\begin_layout Itemize
Der Dualgraph 
\begin_inset Formula $\left(G^{*}\right)^{*}$
\end_inset

 zu 
\begin_inset Formula $G^{*}$
\end_inset

 (bezüglich 
\begin_inset Quotes gld
\end_inset

kanonischer
\begin_inset Quotes grd
\end_inset

 Einbettung von 
\begin_inset Formula $G^{*}$
\end_inset

) ist wieder 
\begin_inset Formula $G$
\end_inset

 selbst.
\end_layout

\end_deeper
\begin_layout Standard
Im Folgenden wird der Satz von Kuratowski eine Charakterisierung planarer
 Graphen liefern.
 Aus ihm lässt sich (allerdings nicht auf triviale Weise) ein Algorithmus
 für den Test auf Planarität ableiten.
 Es wird sich zeigen, dass manche Algorithmen, die auf allgemeinen Graphen
 
\begin_inset Formula $\NP$
\end_inset

-schwer sind, auf planaren Graphen in polynomieller Zeit lösbar sind (z.B.
 
\noun on
Max Cut
\noun default
 bzw.
 
\noun on
Mixed Max Cut
\noun default
).
 Andere, polynomielle Algorithmen sind für planare Graphen einfacher bzw.
 effizienter lösbar (z.B.
 
\noun on
Matching
\noun default
).
\end_layout

\begin_layout Standard
Planare Graphen haben Eigenschaften, die allgemeine Graphen nicht haben,
 wie beispielsweise Färbbarkeit oder balancierte Zerlegbarkeit.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Schnitt
\end_layout

\end_inset

Sei 
\begin_inset Formula $\left(V_{1},V_{2}\right)$
\end_inset

 ein Partition der Knotenmenge eines Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

.
 Sie induziert eine Menge 
\begin_inset Formula $E'=\left\{ \left\{ v_{1},v_{2}\right\} \in E\mid v_{1}\in V_{1},v_{2}\in V_{2}\right\} $
\end_inset

, die 
\noun on
Schnitt
\noun default
 in 
\begin_inset Formula $G$
\end_inset

 genannt wird.
\end_layout

\begin_layout Lemma
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Dualität von Schnitten und Kreisen
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{schnitt-kreis-dual}
\end_layout

\end_inset

Für einen planaren Graph 
\begin_inset Formula $G$
\end_inset

 mit fester planarer Einbettung und zugehörigem Dualgraph 
\begin_inset Formula $G^{*}$
\end_inset

 gilt:
\end_layout

\begin_layout Lemma
\begin_inset Formula $S\subseteq E$
\end_inset

 ist ein Schnitt in 
\begin_inset Formula $G$
\end_inset

 
\begin_inset Formula $\iff$
\end_inset

 
\begin_inset Formula $S^{*}\subseteq E^{*}$
\end_inset

 ist eine Menge von Kreisen in 
\begin_inset Formula $G^{*}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
HoleEdge}[2]{
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[ultra thick] (#1) -- ($(#1)!
\backslash
a!(#2)$);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[ultra thick] (#2) -- ($(#2)!
\backslash
a!(#1)$);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
a{0.4}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{1}
\end_layout

\begin_layout Plain Layout


\backslash
SOWE(1){2}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(2){3}
\end_layout

\begin_layout Plain Layout


\backslash
EA[unit=6](1){4}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(4){5}
\end_layout

\begin_layout Plain Layout


\backslash
SOWE(5){6}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
NOEA(3){a}
\end_layout

\begin_layout Plain Layout


\backslash
NOEA(a){b}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(a){c}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
AddVertexColor{scndcolor}{3,a,b,c,6}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
HoleEdge{2}{3}
\end_layout

\begin_layout Plain Layout


\backslash
HoleEdge{1}{3}
\end_layout

\begin_layout Plain Layout


\backslash
HoleEdge{1}{b}
\end_layout

\begin_layout Plain Layout


\backslash
HoleEdge{b}{4}
\end_layout

\begin_layout Plain Layout


\backslash
HoleEdge{4}{6}
\end_layout

\begin_layout Plain Layout


\backslash
HoleEdge{6}{5}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Edge(1)(2)
\end_layout

\begin_layout Plain Layout


\backslash
Edges(a,3,c,a,b,6,c)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(4)(5)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={fill=thrdcolor,draw=thrdcolor,minimum
 size=15pt}}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={draw=thrdcolor,ultra thick}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Vertex[x=.75,y=-.75]{d1}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[x=-.5,y=-2]{d2}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[x=3,y=1.5]{do}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[x=5.25,y=-.75]{d3}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[x=6.5,y=-2]{d4}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Bounding Box, falls der ganze Dualgraph gezeichnet wird:
\end_layout

\begin_layout Plain Layout


\backslash
path[use as bounding box]($(do) + (0,1.5)$) -- ($(5) + (2,0)$) -- ($(c) -
 (0,2)$) -- ($(2) - (1.8	,0)$);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Bounding Box, falls nicht der ganze Dualgraph gezeichnet wird:
\end_layout

\begin_layout Plain Layout

%
\backslash
path[use as bounding box]($(do) + (0,0)$) -- ($(5) + (1,0)$) -- ($(c) -
 (0,0)$) -- ($(2) - (1,0)$);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Edge(d1)(d2)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(d1)(do)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend angle=0, out=-135, in=160, looseness=2.5}](d2)(do)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Edge(do)(d3)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(d3)(d4)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend angle=0, out=-45, in=20, looseness=2.5}](d4)(do)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={thin,dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={thin,dotted,fill=none}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend angle=0,out=60,in=0,looseness=1.2}](d4)(do)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend angle=0,out=120,in=180,looseness=1.2}](d2)(do)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Rest des Dualgraphen
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[x=3,y=-1.5]{ud1}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[x=1.5,y=-2.5]{ud2}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend left=10}](ud1)(ud2)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend left=30}](ud2)(d1)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend right=10}](ud1)(d1)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(ud1)(d3)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend angle=0, out=-125, in=140,looseness=5.5}](ud2)(do)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={bend angle=0, out=-50, in=35, looseness=8.5}](ud1)(do)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Illustration von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{schnitt-kreis-dual}
\end_layout

\end_inset

: Die Dualkanten zu einem Schnitt in 
\begin_inset Formula $G$
\end_inset

 bilden eine Menge von Kreisen in 
\begin_inset Formula $G^{*}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Hierbei bezeichnet 
\begin_inset Formula $S^{*}$
\end_inset

 die Dualkanten der Kanten in 
\begin_inset Formula $S$
\end_inset

.
 Da 
\begin_inset Formula $\left(G^{*}\right)^{*}=G$
\end_inset

 gilt das Lemma entsprechend für Schnitte in 
\begin_inset Formula $G^{*}$
\end_inset

 und Kreise in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Section
Knoten- und Kantenzahlen
\end_layout

\begin_layout Notation*
\begin_inset Index idx
status open

\begin_layout Plain Layout
n
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
m
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
f
\end_layout

\end_inset

Im Folgenden gelte für einen Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und seiner planaren Einbettung 
\begin_inset Formula $\mathcal{F}$
\end_inset

 
\begin_inset Formula $n\coloneqq\left|V\right|;\:m\coloneqq\left|E\right|;\:f=\left|\mathcal{F}\right|$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Notation*
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $G-x$
\end_inset


\end_layout

\end_inset

Für einen Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

, einen Knoten 
\begin_inset Formula $v\in V$
\end_inset

 und eine Kante 
\begin_inset Formula $e\in E$
\end_inset

 sei 
\begin_inset Formula 
\[
G-v\coloneqq\left(V\backslash\left\{ v\right\} ,\left\{ \left\{ x,y\right\} \in E\mid x\neq v\land y\neq v\right\} \right)
\]

\end_inset

 sowie 
\begin_inset Formula 
\[
G-e\coloneqq\left(V,E\backslash\left\{ e\right\} \right)
\]

\end_inset

der Graph, der entsteht, indem man 
\begin_inset Formula $v$
\end_inset

 bzw.
 
\begin_inset Formula $e$
\end_inset

 aus 
\begin_inset Formula $G$
\end_inset

 
\begin_inset Quotes gld
\end_inset

löscht
\begin_inset Quotes grd
\end_inset


\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Satz von Euler
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{euler}
\end_layout

\end_inset

 In einem zusammenhängenden, planaren, einfachen Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 mit 
\begin_inset Formula $\left|V\right|>0$
\end_inset

 gilt für jede planare Einbettung:
\begin_inset Formula 
\[
n-m+f=2
\]

\end_inset


\end_layout

\begin_layout Proof
Vollständige Induktion über 
\begin_inset Formula $m$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Paragraph*
Induktionsanfang
\end_layout

\end_deeper
\begin_layout Proof
Wenn 
\begin_inset Formula $m=0$
\end_inset

 ist 
\begin_inset Formula $n=1$
\end_inset

 und 
\begin_inset Formula $f=1$
\end_inset

.
 Es folgt 
\begin_inset Formula $n-m+f=1-0+1=2$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Paragraph*
Induktionsschritt
\end_layout

\end_deeper
\begin_layout Proof
Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 mit 
\begin_inset Formula $m\geq2$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Case
\begin_inset Formula $G$
\end_inset

 enthält einen Kreis.
\end_layout

\begin_deeper
\begin_layout Standard
Sei 
\begin_inset Formula $e\in E$
\end_inset

 eine Kante, sodass 
\begin_inset Formula $G'\coloneqq G-e\eqqcolon\left(V',E'\right)$
\end_inset

 zusammenhängend ist und für eine beliebige aber feste Einbettung von 
\begin_inset Formula $G$
\end_inset

 die beiden Facetten, die an 
\begin_inset Formula $e$
\end_inset

 angrenzen, in 
\begin_inset Formula $G'$
\end_inset

 zu einer Facette verschmelzen.
 Dann gilt 
\begin_inset Formula $\left|E'\right|=m-1$
\end_inset

 und 
\begin_inset Formula $\left|\mathcal{F}'\right|=f-1$
\end_inset

.
 Die Induktionsvoraussetzung gilt und impliziert 
\begin_inset Formula $n-\left(m-1\right)+\left(f-1\right)=2$
\end_inset

.
 Es folgt die Behauptung.
\end_layout

\end_deeper
\begin_layout Case
\begin_inset Formula $G$
\end_inset

 ist kreisfrei.
\end_layout

\begin_deeper
\begin_layout Standard
Das heißt 
\begin_inset Formula $G$
\end_inset

 ist ein Baum und 
\begin_inset Formula $f=1$
\end_inset

 und es existiert eine Kante 
\begin_inset Formula $e$
\end_inset

 sodass 
\begin_inset Formula $G-e$
\end_inset

 in zwei zusammenhängenden Graphen 
\begin_inset Formula $G_{1}=\left(V_{1},E_{1}\right)$
\end_inset

 und 
\begin_inset Formula $G_{2}=\left(V_{2},E_{2}\right)$
\end_inset

 zerfällt.
 Nach Induktionsvorraussetzung gilt 
\begin_inset Formula $n_{1}-m_{1}+f_{1}=n_{1}-m_{1}+1=2$
\end_inset

 und 
\begin_inset Formula $n_{2}-m_{2}+f_{2}=n_{2}-m_{2}+1=2$
\end_inset

.
 Da 
\begin_inset Formula $n_{1}+n_{2}=n$
\end_inset

 und 
\begin_inset Formula $m_{1}+m_{2}=m-1$
\end_inset

 folgt
\begin_inset Formula 
\begin{align*}
n-m+f & =n-m+1\\
 & =n_{1}+n_{2}-m_{1}-m_{2}-1+1\\
 & =\left(n_{1}-m_{1}+1\right)+\left(n_{2}-m_{2}+1\right)-2\\
 & =2+2-2\\
 & =2\qedhere
\end{align*}

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Corollary
Für jede planare Einbettung eines Graphen 
\begin_inset Formula $G$
\end_inset

 ist die Anzahl der Facetten gleich.
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Corollary
Ein Baum mit 
\begin_inset Formula $n$
\end_inset

 Knoten hat 
\begin_inset Formula $n-1$
\end_inset

 Kanten und eine Facette.
\end_layout

\begin_layout Lemma
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Maximale Kantenzahl in planaren Graphen
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{kantenzahl}
\end_layout

\end_inset

Ein planarer Graph mit 
\begin_inset Formula $n$
\end_inset

 Knoten, 
\begin_inset Formula $n\geq3$
\end_inset

, hat höchstens 
\begin_inset Formula $3n-6$
\end_inset

 Kanten.
\end_layout

\begin_layout Proof
Sei 
\begin_inset Formula $G$
\end_inset

 o.B.d.A maximal planar, das heißt, dass das Hinzufügen einer beliebigen Kante
 zu 
\begin_inset Formula $G$
\end_inset

 zu einem nicht planaren Graphen führt.
 Dann sind bezüglich jeder planaren Einbettung von 
\begin_inset Formula $G$
\end_inset

 alle Facetten Dreiecke und jede Kante trennt zwei Facetten.
 
\begin_inset Formula $G$
\end_inset

 ist insbesondere zussammenhängend.
\end_layout

\begin_layout Proof
\begin_inset Formula 
\begin{align*}
\implies &  & 2m & =3f\\
 &  &  & =3\cdot\left(2-n+m\right)\\
 &  &  & =6-3n+3m\\
\implies &  & -m & =6-3n\\
\implies &  & m & =3n-6
\end{align*}

\end_inset


\end_layout

\begin_layout Lemma
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Summenformel für Knotengrade in planaren Graphen
\end_layout

\end_inset

Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein planarer Graph mit mindestens 3 Knoten.
 Es bezeichne 
\begin_inset Formula $d_{max}\left(E\right)$
\end_inset

 den maximalen Knotengrad in 
\begin_inset Formula $G$
\end_inset

 und für 
\begin_inset Formula $0\leq i\le d_{max}\left(E\right)$
\end_inset

 bezeichen 
\begin_inset Formula $n_{i}$
\end_inset

 die Anzahl der Knoten von Grad 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
 Dann gilt:
\begin_inset Formula 
\[
6n_{0}+5n_{1}+4n_{2}+3n_{3}+2n_{4}+n_{5}\ge n_{7}+2n_{8}+3n_{9}+\dots+\left(d_{max}\left(E\right)-6\right)n_{d_{max}\left(E\right)}+12
\]

\end_inset


\end_layout

\begin_layout Proof
Es gilt 
\begin_inset Formula $\sum_{i=0}^{d_{max}\left(E\right)}n_{i}=n$
\end_inset

 und 
\begin_inset Formula $\sum_{i=0}^{d_{max}\left(E\right)}i\cdot n_{i}=2m$
\end_inset

.
 Damit:
\begin_inset Formula 
\begin{align*}
 &  & m & \le3n-6\\
\implies &  & 6n & \geq2m+12\\
\implies &  & 6\cdot\sum_{i=0}^{d_{max}\left(E\right)}n_{i} & \geq\sum_{i=0}^{d_{max}\left(E\right)}i\cdot n_{i}+12
\end{align*}

\end_inset


\end_layout

\begin_layout Proof
Es folgt die Behauptung.
\end_layout

\begin_layout Corollary
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Knoten mit Grad kleiner 5
\end_layout

\end_inset

In jedem planaren Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 existiert 
\begin_inset Formula $v\in V$
\end_inset

 mit 
\begin_inset Formula $d\left(v\right)\leq5$
\end_inset

.
\end_layout

\begin_layout Chapter
Der Satz von Kuratowski
\end_layout

\begin_layout Definition
Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Index idx
status open

\begin_layout Plain Layout
Subgraph
\end_layout

\end_inset

Ein Graph 
\begin_inset Formula $G'=\left(V',E'\right)$
\end_inset

 heißt 
\noun on
Subgraph
\noun default
 von 
\begin_inset Formula $G$
\end_inset

, falls 
\begin_inset Formula $V'\subseteq V\land E'\subseteq E$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Index idx
status open

\begin_layout Plain Layout
Unterteilung
\end_layout

\end_inset

Ein Graph 
\begin_inset Formula $G'$
\end_inset

 heißt 
\noun on
Unterteilung
\noun default
 von 
\begin_inset Formula $G$
\end_inset

, falls 
\begin_inset Formula $G'$
\end_inset

 aus 
\begin_inset Formula $G$
\end_inset

 entsteht, indem Kanten durch einfache Wege ersetzt werden.
\end_layout

\begin_layout Itemize
\begin_inset Index idx
status open

\begin_layout Plain Layout
Minor
\end_layout

\end_inset

Ein Graph 
\begin_inset Formula $H$
\end_inset

 heißt 
\noun on
Minor
\noun default
 von 
\begin_inset Formula $G$
\end_inset

, falls 
\begin_inset Formula $H$
\end_inset

 aus 
\begin_inset Formula $G$
\end_inset

 durch Löschen von Knoten und/oder Kanten und/oder Kontraktion von Kanten
 entsteht.
 Hierbei meint die Kontraktion zweier Kanten 
\begin_inset Formula $e=\left\{ u,v\right\} $
\end_inset

 und 
\begin_inset Formula $f=\left\{ v,w\right\} $
\end_inset

, wobei 
\begin_inset Formula $v$
\end_inset

 den Grad 2 hat, das Löschen von 
\begin_inset Formula $v$
\end_inset

, 
\begin_inset Formula $e$
\end_inset

 und 
\begin_inset Formula $f$
\end_inset

 sowie das Einfügen der Kante 
\begin_inset Formula $\left\{ u,w\right\} $
\end_inset

 (
\begin_inset Quotes gld
\end_inset

Gegenteil von Unterteilung
\begin_inset Quotes grd
\end_inset

).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align right
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.7}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices{line}{u,v,w}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(u,v,w)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "15col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula $\longrightarrow$
\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.7}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices{line}{v,w}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(v)(w)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Kontraktion der Kanten 
\begin_inset Formula $\left\{ u,v\right\} $
\end_inset

 und 
\begin_inset Formula $\left\{ v,w\right\} $
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Remark
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $H$
\end_inset

 ist Minor von 
\begin_inset Formula $G$
\end_inset

, wenn 
\begin_inset Formula $G$
\end_inset

 eine Unterteilung von 
\begin_inset Formula $H$
\end_inset

 als Subgraph enthält.
\end_layout

\begin_layout Itemize
Ein planarer Graph kann keinen nicht-planaren Graphen als Subgraph enthalten.
\end_layout

\begin_layout Itemize
Ein planarer Graph kann nicht eine Unterteilung eines nicht-planaren Graphen
 sein.
\end_layout

\end_deeper
\begin_layout Corollary
Ein planarer Graph kann keinen nicht-planaren Graphen als Minor enthalten.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $\Theta$
\end_inset

-Graph
\end_layout

\end_inset

Ein Graph, der 
\begin_inset Formula $K_{3,2}$
\end_inset

 als Minor oder Unterteilung enthält, heißt 
\noun on

\begin_inset Formula $\Theta$
\end_inset

-Graph
\noun default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{VertexStyle/.append style={minimum size=15pt}} 
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices{circle}{1,2,3,4}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(1,2,3,4,1,3)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Der kleinste 
\begin_inset Formula $\Theta$
\end_inset

-Graph: Ein Kreis mit einer Querkante.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{facette-begrenzen}
\end_layout

\end_inset

Wenn 
\begin_inset Formula $G$
\end_inset

 ein planarer Graph ist, der einen einfachen Kreis 
\begin_inset Formula $C$
\end_inset

 enthält und keine zwei Knoten auf 
\begin_inset Formula $C$
\end_inset

 in 
\begin_inset Formula $G-E\left(C\right)$
\end_inset

 verbunden sind, so kann 
\begin_inset Formula $G$
\end_inset

 so planar eingebettet werden, dass 
\begin_inset Formula $C$
\end_inset

 eine Facette begrenzt.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{facettenraender-kein-theta}
\end_layout

\end_inset

Facettenränder enthalten keinen 
\begin_inset Formula $\Theta$
\end_inset

-Graph.
 Ist also 
\begin_inset Formula $G$
\end_inset

 planar mit fester Einbettung, 
\begin_inset Formula $f$
\end_inset

 eine Facette und 
\begin_inset Formula $F$
\end_inset

 der Subgraph von 
\begin_inset Formula $G$
\end_inset

, der aus allen zu 
\begin_inset Formula $f$
\end_inset

 inzidenten Knoten und Kanten besteht, gilt, dass 
\begin_inset Formula $F$
\end_inset

 keinen 
\begin_inset Formula $\Theta$
\end_inset

-Graphen enthält.
\end_layout

\begin_layout Definition*
\begin_inset Index idx
status open

\begin_layout Plain Layout
minor-minimal, nicht-planar
\end_layout

\end_inset

Ein Graph 
\begin_inset Formula $G$
\end_inset

 ist ein 
\noun on
minor-minimaler, nicht-planarer
\noun default
 Graph wenn
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $G$
\end_inset

 nicht planar ist, aber
\end_layout

\begin_layout Itemize
jeder Minor von 
\begin_inset Formula $G$
\end_inset

 planar ist.
\end_layout

\end_deeper
\begin_layout Example*
\begin_inset Formula $K_{5}$
\end_inset

 und 
\begin_inset Formula $K_{3,3}$
\end_inset

 sind minor-minimal nicht-planar.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Blockzerlegung
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Separatorknoten
\end_layout

\end_inset

Auf der Kantenmenge 
\begin_inset Formula $E$
\end_inset

 eines Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 sei die Äquivalenzrelation 
\begin_inset Formula $\sim$
\end_inset

 definiert durch:
\begin_inset Formula 
\[
\forall l_{1},l_{2}\in E:\:l_{1}\sim l_{2}\iff l_{1}=l_{2}\lor\exists\text{ einfacher Kreis, der }l_{1}\text{ und }l_{2}\text{ enthält}
\]

\end_inset

In diesem Kontext wird ein Subgraph, der aus einer Äquivalenzklasse besteht,
 
\noun on
Block
\noun default
, und die Zerlegung von 
\begin_inset Formula $G$
\end_inset

 in seine Blöcke 
\noun on
Blockzerlegung
\noun default
 genannt.
 In der Blockzerlegung ist jede Kante 
\begin_inset Formula $e\in E$
\end_inset

 genau einem Block zugeordnet.
 Knoten, die in mehreren Blöcken enthalten sind, heißen 
\noun on
Separatorknoten
\noun default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
def
\backslash
d{1.2}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=180,d=
\backslash
d]{v}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=120,d=
\backslash
d,NoLabel]{1}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=60,d=
\backslash
d,NoLabel]{2}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=0,d=
\backslash
d,NoLabel]{3}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=-60,d=
\backslash
d,NoLabel]{4}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=-120,d=
\backslash
d,NoLabel]{5}
\end_layout

\begin_layout Plain Layout

	
\backslash
path[use as bounding box](v) rectangle (3);
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(v,1,2,3,4,5,v)
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (v) -- ($(v) - (0.8,0)$);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ein Kreis mit Separatorknoten 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Notation*
\begin_inset Index idx
status open

\begin_layout Plain Layout
Nachbarschaft
\end_layout

\end_inset

In einem Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 bezeichne für ein beliebiges 
\begin_inset Formula $v\in V$
\end_inset

 
\begin_inset Formula $N\left(v\right)$
\end_inset

 die 
\noun on
Nachbarschaft
\noun default
 von 
\begin_inset Formula $v$
\end_inset

:
\begin_inset Formula 
\[
N\left(v\right)\coloneqq\left\{ u\in V\mid\left\{ v,u\right\} \in E\right\} 
\]

\end_inset


\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Satz von Kuratowski
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{kuratowski}
\end_layout

\end_inset

Ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ist genau dann planar, wenn er weder 
\begin_inset Formula $K_{5}$
\end_inset

noch 
\begin_inset Formula $K_{3,3}$
\end_inset

 als Minor enthält.
\end_layout

\begin_layout Proof
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Paragraph*
\begin_inset Quotes gld
\end_inset


\begin_inset Formula $\implies$
\end_inset


\begin_inset Quotes grd
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Klar, denn 
\begin_inset Formula $K_{5}$
\end_inset

 und 
\begin_inset Formula $K_{3,3}$
\end_inset

 sind nicht planar und ein planarer Graph kann keinen nicht-planaren Graphen
 als Minor enthalten.
 
\end_layout

\begin_deeper
\begin_layout Paragraph*
\begin_inset Quotes gld
\end_inset


\begin_inset Formula $\impliedby$
\end_inset


\begin_inset Quotes grd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Proof
Falls ein Graph nicht planar ist, so enthält er einen minor-minimalen, nicht-pla
naren Graphen als Minor.
 Zum Beweis wird nun ein solcher minor-minimaler nicht-planarer Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 sowie 
\begin_inset Formula $x,y\in V$
\end_inset

 mit 
\begin_inset Formula $\left\{ x,y\right\} \in E$
\end_inset

 betrachtet.
 In 
\begin_inset Formula $G$
\end_inset

 hat jeder Knoten mindestens Grad 3 (da er ansonsten nicht minor-minimal
 wäre).
 Sei 
\begin_inset Formula $G'$
\end_inset

 der Graph, der aus 
\begin_inset Formula $G$
\end_inset

 entsteht, wenn 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

,
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

 und alle zu 
\begin_inset Formula $x$
\end_inset

 und 
\begin_inset Formula $y$
\end_inset

 inzidenten Kanten entfernt werden (
\begin_inset Formula $G'=G-x-y$
\end_inset

).
 Nun wird nacheinander bewiesen:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $G'$
\end_inset

 enthält keinen 
\begin_inset Formula $\Theta$
\end_inset

-Graph
\end_layout

\begin_layout Enumerate
\begin_inset Formula $G'$
\end_inset

 enthält höchstens einen Knoten mit Grad 1
\end_layout

\begin_layout Enumerate
\begin_inset Formula $G'$
\end_inset

 ist ein einfacher Kreis
\end_layout

\end_deeper
\begin_layout Proof
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=90,d=1.7,NoLabel]{1}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=162,d=1.7,NoLabel]{2}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=18,d=1.7,NoLabel]{3}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=234,d=1.7]{x}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=306,d=1.7]{y}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges[style={ultra thick}](1,2,3,1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(1,y,3,x,2,y,1,x,y)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.7}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[NoLabel]{1}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[NoLabel](1){3}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA(3){x}
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{VertexStyle/.append style={fill=gray}}
\end_layout

\begin_layout Plain Layout

	
\backslash
SO[NoLabel](1){2}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[NoLabel](2){4}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA(4){y}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges[style={ultra thick}](1,2,3,4,1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(x)(2)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(x)(4)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(x)(y)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(y)(1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(y)(3)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Das Vorgehen im Beweis von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{kuratowski}
\end_layout

\end_inset

 ist sinnvoll, da sowohl 
\begin_inset Formula $K_{5}$
\end_inset

 also auch 
\begin_inset Formula $K_{3,3}$
\end_inset

 entstehen, wenn man zwei Knoten (im Beweis 
\begin_inset Formula $x$
\end_inset

 und 
\begin_inset Formula $y$
\end_inset

) zu einem einfachen Kreis hinzufügt.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "kuratowski-1"

\end_inset

1.: 
\begin_inset Formula $\boldsymbol{G'}$
\end_inset

 enthält keinen 
\begin_inset Formula $\boldsymbol{\Theta}$
\end_inset

-Graph
\end_layout

\begin_layout Proof
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
smallqed{}
\end_layout

\end_inset

Angenommen, 
\begin_inset Formula $G'$
\end_inset

 enthält den 
\begin_inset Formula $\Theta$
\end_inset

-Graphen.
 
\begin_inset Formula $G'$
\end_inset

 kann so eingebettet werden, dass 
\begin_inset Formula $N\left(x\right)\cup N\left(y\right)$
\end_inset

 auf dem Rand einer Facette liegt.
 Sei 
\begin_inset Formula $F$
\end_inset

 der planare Subgraph von 
\begin_inset Formula $G'$
\end_inset

, der durch den Rand dieser Facette induziert wird.
 
\begin_inset Formula $F$
\end_inset

 enthält einen einfachen Kreis 
\begin_inset Formula $C$
\end_inset

, aber nach 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{facettenraender-kein-theta}
\end_layout

\end_inset

 keinen 
\begin_inset Formula $\Theta$
\end_inset

-Graph.
 
\end_layout

\begin_layout Proof
Da 
\begin_inset Formula $G'$
\end_inset

 jedoch den 
\begin_inset Formula $\Theta$
\end_inset

-Graphen enthält, muss eine Kante 
\begin_inset Formula $e\in E\left(G'\right)\backslash E\left(F\right)$
\end_inset

 existieren.
 O.B.d.A.
 sei diese Kante im Äußeren von 
\begin_inset Formula $C$
\end_inset

.
 
\begin_inset Formula $\text{Äußeres}\left(C\right)$
\end_inset

 ist also nicht leer.
 Da 
\begin_inset Formula $G$
\end_inset

 minor-minimal ist, ist somit 
\begin_inset Formula $\tilde{G}:=G-\text{Äußeres}\left(C\right)$
\end_inset

 planar.
 Nach 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{facette-begrenzen}
\end_layout

\end_inset

 kann 
\begin_inset Formula $\tilde{G}$
\end_inset

 so planar eingebettet werden, dass 
\begin_inset Formula $C$
\end_inset

 die äußere Facette begrenzt.
 Zu dieser Einbettung kann 
\begin_inset Formula $\text{Äußeres}\left(C\right)$
\end_inset

 allerdings wieder hinzugefügt werden, ohne die Planarität zu zerstören.
 
\begin_inset Formula $G$
\end_inset

 ist somit planar.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
lightning$
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "kuratowski-2"

\end_inset

2.: 
\begin_inset Formula $\boldsymbol{G'}$
\end_inset

 enthält höchstens einen Knoten mit Grad 1
\end_layout

\begin_layout Proof
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
smallqed{}
\end_layout

\end_inset

Angenommen, 
\begin_inset Formula $G'$
\end_inset

 enthalte zwei Knoten 
\begin_inset Formula $u$
\end_inset

 und 
\begin_inset Formula $v$
\end_inset

, die beide Grad 1 haben.
 Da in 
\begin_inset Formula $G$
\end_inset

 der minimale Grad jedes Knoten 3 beträgt, sind 
\begin_inset Formula $u$
\end_inset

 und 
\begin_inset Formula $v$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

 sowohl mit 
\begin_inset Formula $x$
\end_inset

 als auch mit 
\begin_inset Formula $y$
\end_inset

 durch Kanten verbunden.
 Damit enthält 
\begin_inset Formula $G$
\end_inset

 den 
\begin_inset Formula $\Theta$
\end_inset

-Graphen.
 Deshalb kann keine weitere Kante 
\begin_inset Formula $\left\{ i,j\right\} $
\end_inset

 mit 
\begin_inset Formula $i,j\notin\left\{ u,v,x,y\right\} $
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

 existieren, da 
\begin_inset Formula $G-i-j$
\end_inset

 sonst den 
\begin_inset Formula $\Theta$
\end_inset

-Graphen enthielte.
 Das stünde im Widerspruch zu 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[kuratowski-1]{1.}
\end_layout

\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Formula $G$
\end_inset

 kann außer 
\begin_inset Formula $\left\{ u,v,x,y\right\} $
\end_inset

 nicht mehr als zwei weitere Knoten besitzen.
 Ein dritter Knoten müsste mindestens Grad 
\begin_inset Formula $3$
\end_inset

 haben, könnte aber nur mit 
\begin_inset Formula $x$
\end_inset

 und 
\begin_inset Formula $y$
\end_inset

 verbunden werden, da 
\begin_inset Formula $u$
\end_inset

 und 
\begin_inset Formula $v$
\end_inset

 durch die anderen beiden Knoten schon Grad 
\begin_inset Formula $3$
\end_inset

 hätten.
 
\begin_inset Formula $G$
\end_inset

 kann also nur wie folgt aussehen:
\end_layout

\begin_deeper
\begin_layout Itemize
es existiert außer 
\begin_inset Formula $\left\{ u,v,x,y\right\} $
\end_inset

 kein weiterer Knoten.
\end_layout

\begin_layout Itemize
es existiert außer 
\begin_inset Formula $\left\{ u,v,x,y\right\} $
\end_inset

 ein weiterer Knoten.
\end_layout

\begin_layout Itemize
es existieren außer 
\begin_inset Formula $\left\{ u,v,x,y\right\} $
\end_inset

 zwei weitere Knoten 
\begin_inset Formula $z$
\end_inset

,
\begin_inset Formula $z'$
\end_inset

 mit 
\begin_inset Formula $\left\{ z,z'\right\} \notin E$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
In allen Fällen wäre jedoch 
\begin_inset Formula $G$
\end_inset

 planar.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
lightning$
\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex{u}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices{circle}{v,x,y}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(v,x,v,y,v,u,x,u,y,x)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Kein weiterer Knoten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex{u}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(u){z}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(z){v}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[x=-1,y=1.5]{x}
\end_layout

\begin_layout Plain Layout

	
\backslash
SO[unit=3](x){y}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(z,x,z,y,z,v,z,u,x,v,y,u)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(x)(y)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Ein weiterer Knoten.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex{u}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(u){z}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA(z){x}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA(z){y}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA(x){z'}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(z'){v}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(u,x,z,u,y,z)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(v,x,z',v,y,z')
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(x)(y)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Zwei weitere, nicht verbundene Knoten
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Zu 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[kuratowski-2]{2.}
\end_layout

\end_inset

 im Beweis von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{kuratowski}
\end_layout

\end_inset

: 
\begin_inset Formula $G$
\end_inset

 wäre in allen Fällen planar, falls es in 
\begin_inset Formula $G'=G-x-y$
\end_inset

 zwei Knoten 
\begin_inset Formula $\left\{ u,v\right\} $
\end_inset

 mit Grad 1 gäbe.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
\begin_inset CommandInset label
LatexCommand label
name "kuratowski-3"

\end_inset

3.: 
\begin_inset Formula $\boldsymbol{G'}$
\end_inset

 ist ein einfachen Kreis
\end_layout

\begin_layout Proof
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
smallqed{}
\end_layout

\end_inset

Betrachte die Blockzerlegung von 
\begin_inset Formula $G'$
\end_inset

.
 Wegen 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[kuratowski-1]{1.}
\end_layout

\end_inset

 besteht jeder Block entweder aus nur einer Kante oder einem einfachen Kreis.
 Wegen 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[kuratowski-2]{2.}
\end_layout

\end_inset

 besteht 
\begin_inset Formula $G'$
\end_inset

 nicht nur aus einer Kante und enthält auch keine zwei 
\begin_inset Quotes gld
\end_inset

Endblöcke
\begin_inset Quotes grd
\end_inset

, die jeweils nur aus einer Kante bestehen.
 Es folgt, dass mindestens ein Block in 
\begin_inset Formula $G$
\end_inset

 aus einem einfachen Kreis besteht.
\end_layout

\begin_layout Proof
Angenommen, 
\begin_inset Formula $G'$
\end_inset

 enthalte außer einem Kreis 
\begin_inset Formula $C$
\end_inset

 noch einen weiteren Knoten.
 Sei 
\begin_inset Formula $v$
\end_inset

 ein Separatorknoten auf 
\begin_inset Formula $C$
\end_inset

.
 Da jeder Knoten in 
\begin_inset Formula $G$
\end_inset

 mindestens Grad 3 hat, sind alle 
\begin_inset Formula $i\in C$
\end_inset

 (außer 
\begin_inset Formula $v$
\end_inset

) mit 
\begin_inset Formula $x$
\end_inset

 oder 
\begin_inset Formula $y$
\end_inset

 verbunden.
 Außerdem enthält 
\begin_inset Formula $C$
\end_inset

 mindestens 3 Knoten.
 Somit existieren mindestens zwei Knoten in 
\begin_inset Formula $C\backslash\left\{ v\right\} $
\end_inset

, die mit 
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

 einen 
\begin_inset Formula $\Theta$
\end_inset

-Graph bilden.
 Wegen 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[kuratowski-1]{1.}
\end_layout

\end_inset

 gibt es also keine zu 
\begin_inset Formula $C$
\end_inset

 und 
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

 unabhängige Kante und natürlich auch keine isolierten Knoten.
 
\begin_inset Formula $G-u-v$
\end_inset

 kann wegen 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[kuratowski-1]{1.}
\end_layout

\end_inset

 keinen 
\begin_inset Formula $\Theta$
\end_inset

-Graphen enthalten.
 
\begin_inset Formula $C$
\end_inset

 hat also nur drei Knoten und insgesamt ist 
\begin_inset Formula $G$
\end_inset

 der Prisma-Graph, welher planar ist.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
lightning$
\end_layout

\end_inset

 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex{u}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(u){v}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[unit=1,NoLabel](v){1}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[unit=1,NoLabel](v){2}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(1){x}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA(2){y}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={bend left=40}](u)(x)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={bend right=40}](u)(y)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(u,v,1,2,y,x,1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(v)(2)
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (2.65,0) {$C$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Falls es in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[kuratowski-3]{3.}
\end_layout

\end_inset

 im Beweis von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{kuratowski}
\end_layout

\end_inset

 außer dem Kreis in 
\begin_inset Formula $C$
\end_inset

 in 
\begin_inset Formula $G'$
\end_inset

 noch einen weiteren Knoten 
\begin_inset Formula $u$
\end_inset

 gäbe, müsste 
\begin_inset Formula $G$
\end_inset

 der Prisma-Graph sein.
 Dieser ist jedoch planar.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Beweis des Satzes
\end_layout

\end_deeper
\begin_layout Proof
Ein minor-minimaler, nicht-planarer Graph 
\begin_inset Formula $G$
\end_inset

 besteht aus einer Kante 
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

, einem einfachen Kreis 
\begin_inset Formula $C$
\end_inset

 und Kanten zwischen Knoten auf 
\begin_inset Formula $C$
\end_inset

 und 
\begin_inset Formula $x$
\end_inset

 und/oder 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout Proof
Es gilt nun für alle Knoten auf 
\begin_inset Formula $C$
\end_inset

 
\begin_inset Formula $u,v\in V$
\end_inset

 mit 
\begin_inset Formula $\left\{ u,v\right\} \in E$
\end_inset

: 
\begin_inset Formula 
\[
\left\{ u,x\right\} \in E\land\left\{ u,y\right\} \notin E\implies\left\{ v,x\right\} \notin E
\]

\end_inset

Denn angenommen, 
\begin_inset Formula $\left\{ v,x\right\} \in E$
\end_inset

.
 
\begin_inset Formula $G-\left\{ v,x\right\} $
\end_inset

 ist planar (da 
\begin_inset Formula $G$
\end_inset

 minor-minimal nicht-planar ist).
 Dann kann allerdings 
\begin_inset Formula $\left\{ v,x\right\} $
\end_inset

 in die Einbettung von 
\begin_inset Formula $G-\left\{ v,x\right\} $
\end_inset

 kreuzungsfrei eingefügt werden (vgl.
\begin_inset space \space{}
\end_inset

Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "g-vx"

\end_inset

).
 Somit ist ist also auch 
\begin_inset Formula $G$
\end_inset

 planar.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
lightning$
\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{x}
\end_layout

\begin_layout Plain Layout


\backslash
SO(x){y}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(5,0)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=180,d=3]{u}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(5,-1.5)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=180,d=3]{v}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
Edge(x)(y)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(u)(x)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(u)(v)
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge(v)(x)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "g-vx"

\end_inset


\begin_inset Formula $G-\left\{ v,x\right\} $
\end_inset

.
 Da die Kante 
\begin_inset Formula $\left\{ u,y\right\} $
\end_inset

 nicht existiert und 
\begin_inset Formula $G-\left\{ v,x\right\} $
\end_inset

 planar ist, kann die Kante 
\begin_inset Formula $\left\{ v,x\right\} $
\end_inset

 auf jeden Fall kreuzungsfrei gezogen werden.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{x}
\end_layout

\begin_layout Plain Layout


\backslash
SO(x){y}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(5,0)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=180,d=3]{u}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=150,d=3,NoLabel]{22}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={draw=none}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=120,d=3,NoLabel]{23}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(5,-1.5)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=180,d=3]{v}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=210,d=3,NoLabel]{12}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={draw=none}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=240,d=3,NoLabel]{13}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
Edge(x)(y)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(u)(x)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(u)(v)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(y)(v)
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Edges(u,22,23)
\end_layout

\begin_layout Plain Layout


\backslash
Edges(v,12,13)
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(22) + (.7,.3)$) {$C$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{x}
\end_layout

\begin_layout Plain Layout


\backslash
SO(x){y}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(5,0)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=180,d=3]{u}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=150,d=3,NoLabel]{22}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={draw=none}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=120,d=3,NoLabel]{23}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(5,-1.5)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=180,d=3]{v}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=210,d=3,NoLabel]{12}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={draw=none}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=240,d=3,NoLabel]{13}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
Edge(x)(y)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(u)(x)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(u)(v)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(y)(v)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(u)(y)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(x)(v)
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Edges(u,22,23)
\end_layout

\begin_layout Plain Layout


\backslash
Edges(v,12,13)
\end_layout

\begin_layout Plain Layout


\backslash
node at ($(22) + (.7,.3)$) {$C$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Im minor-minimalen, nicht-planaren Graph 
\begin_inset Formula $G$
\end_inset

 sind zwei Knoten 
\begin_inset Formula $\left\{ u,v\right\} $
\end_inset

 auf dem Kreis 
\begin_inset Formula $C$
\end_inset

 entweder jeweils 
\emph on
nur
\emph default
 mit 
\begin_inset Formula $x$
\end_inset

 
\emph on
oder
\emph default
 
\begin_inset Formula $y$
\end_inset

 oder 
\emph on
beide
\emph default
 mit 
\begin_inset Formula $x$
\end_inset

 
\emph on
und
\emph default
 
\begin_inset Formula $y$
\end_inset

 verbunden.
 Nur eine 
\begin_inset Quotes gld
\end_inset

Kreuzkante
\begin_inset Quotes grd
\end_inset

 kann nicht vorkommen.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Also gilt für die Konten auf 
\begin_inset Formula $C$
\end_inset

: entweder sind 
\emph on
alle
\emph default
 Knoten mit 
\begin_inset Formula $x$
\end_inset

 
\emph on
und
\emph default
 
\begin_inset Formula $y$
\end_inset

 verbunden, oder jeweils abwechselnd.
 Hierfür gibt es aber nur zwei minor-minimale, nicht-planare Möglichkeiten:
 
\begin_inset Formula $K_{5}$
\end_inset

 und 
\begin_inset Formula $K_{3,3}$
\end_inset

.
 Alle weiteren Möglichkeiten hätten 
\begin_inset Formula $K_{5}$
\end_inset

 oder 
\begin_inset Formula $K_{3,3}$
\end_inset

 als Minor.
\end_layout

\begin_layout Chapter
Färbung planarer Graphen
\end_layout

\begin_layout Section
Einfache Färbung
\end_layout

\begin_layout Problem*
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Landkartenfärbungsproblem
\end_layout

\end_inset

Gegeben eine Landkarte, wie viele Farben werden mindestens benötigt, um
 jedem Land eine Farbe zuzuweisen, so, dass keine aneinandergrenzenden Länder
 die selbe Farbe haben? 
\end_layout

\begin_layout Standard
Eine Landkarte einzufärben entspricht hierbei dem Problem, einen Graphen
 einzufärben, dessen Knoten mit den Ländern der Karte identifiziert werden
 und zwei Knoten genau dann eine Kante haben, wenn die entsprechenden Länder
 aneinander grenzen.
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Färbungsproblem
\end_layout

\end_inset

Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und ein 
\begin_inset Formula $k\in\mathbb{N}$
\end_inset

, kann 
\begin_inset Formula $G$
\end_inset

 mit 
\begin_inset Formula $k$
\end_inset

 Farben so gefärbt werden, dass für jede Kante 
\begin_inset Formula $\left\{ u,v\right\} \in E$
\end_inset

 
\begin_inset Formula $u$
\end_inset

 und 
\begin_inset Formula $v$
\end_inset

 verschiedene Farben haben?
\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Vierfarbensatz|hide
\end_layout

\end_inset

Jeder planare Graph kann mit vier Farben gefärbt werden.
\end_layout

\begin_layout Standard
Ohne Beweis.
\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Fünffarbensatz|hide
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{fuenffarbensatz}
\end_layout

\end_inset

Jeder planare Graph ist fünffärbbar
\end_layout

\begin_layout Proof
Induktion über die Anzahl der Knoten 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Paragraph*
Induktionsanfang 
\end_layout

\begin_layout Standard
\begin_inset Formula $n\leq5$
\end_inset

: trivial
\end_layout

\begin_layout Paragraph*
Induktionsvoraussetzung
\end_layout

\begin_layout Standard
Sei jeder planarer Graph 
\begin_inset Formula $G'=\left(V,E\right)$
\end_inset

 mit 
\begin_inset Formula $\left|V\right|\leq n-1$
\end_inset

 fünffärbbar.
\end_layout

\begin_layout Paragraph
Induktionsschritt
\end_layout

\begin_layout Standard
Sei 
\begin_inset Formula $G\coloneqq\left(V,E\right)$
\end_inset

 mit 
\begin_inset Formula $\left|V\right|=n$
\end_inset

.
 Sei 
\begin_inset Formula $v\in G$
\end_inset

 sodass 
\begin_inset Formula $\forall u\in V:d\left(v\right)\leq d\left(u\right)$
\end_inset

.
 Dann gilt: 
\begin_inset Formula $d\left(v\right)\leq5$
\end_inset

.
 Sei 
\begin_inset Formula $\bar{G}\coloneqq G-v$
\end_inset

.
\end_layout

\begin_layout Case
\begin_inset Formula $d\left(v\right)<5$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Standard
Färbe 
\begin_inset Formula $\bar{G}$
\end_inset

 mit fünf Farben (nach IV möglich).
 Für die Knoten, die in 
\begin_inset Formula $G$
\end_inset

 an 
\begin_inset Formula $v$
\end_inset

 grenzen, werden maximal 4 Farben benötigt, da es höchstens 4 sind.
 Verwende nicht verwendete Farbe für 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Case
\begin_inset Formula $d\left(v\right)=5$
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Standard
Bette 
\begin_inset Formula $\bar{G}$
\end_inset

 planar ein.
 O.B.d.A.
 seien die Nachbarn von 
\begin_inset Formula $v$
\end_inset

 
\begin_inset Formula $N\left(v\right)\coloneqq\left\{ 1,2,3,4,5\right\} $
\end_inset

.
 Diese liegen in 
\begin_inset Formula $\bar{G}$
\end_inset

 auf einer Facette (da sie in 
\begin_inset Formula $G$
\end_inset

 
\begin_inset Quotes gld
\end_inset

um 
\begin_inset Formula $v$
\end_inset

 herum
\begin_inset Quotes grd
\end_inset

 liegen).
 Nach 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{kantenzahl}
\end_layout

\end_inset

 können nicht gleichzeitig alle Paare in 
\begin_inset Formula $N\left(v\right)$
\end_inset

 verbunden sein: Dies wären 
\begin_inset Formula $10$
\end_inset

 Kanten, allerdings können es nicht mehr als 
\begin_inset Formula $3\cdot5-6=9$
\end_inset

 sein.
 Es gibt also ein Paar nicht verbundener Knoten.
 Dies seien o.B.d.A.
 
\begin_inset Formula $2$
\end_inset

 und 
\begin_inset Formula $5$
\end_inset

.
 Verschmelze 
\begin_inset Formula $2$
\end_inset

 und 
\begin_inset Formula $5$
\end_inset

 in 
\begin_inset Formula $\bar{G}'$
\end_inset

 zu einem Knoten 
\begin_inset Formula $u$
\end_inset

.
 Laut Induktionsvoraussetzung lässt sich 
\begin_inset Formula $\bar{G}'$
\end_inset

 fünffärben.
 Somit kann auch 
\begin_inset Formula $\bar{G}$
\end_inset

 mit fünf Farben gefärbt werden, wobei 
\begin_inset Formula $2$
\end_inset

 und 
\begin_inset Formula $5$
\end_inset

 die selbe Farbe erhalten.
 Insgesamt werden also für 
\begin_inset Formula $1$
\end_inset

, 
\begin_inset Formula $2$
\end_inset

, 
\begin_inset Formula $3$
\end_inset

, 
\begin_inset Formula $4$
\end_inset

 und 
\begin_inset Formula $5$
\end_inset

 nur vier Farben benötigt.
 Die verbleibende kann für 
\begin_inset Formula $v$
\end_inset

 verwendet werden.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={fill=color1}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{v}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={fill=color2}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=90,d=2]{1}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={fill=color3}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=162,d=2]{2}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={fill=color4}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=234,d=2]{3}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={fill=color5}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=306,d=2]{4}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={fill=color3}}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=18,d=2]{5}
\end_layout

\begin_layout Plain Layout


\backslash
Edge(v)(1)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(v)(2)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(v)(3)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(v)(4)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(v)(5)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={dotted}](1,2,3,4,5,1)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={dotted,bend left,out=72,in=108,looseness=1.7}](1)(4)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={dotted,bend right,out=-72,in=-108,looseness=1.7}](1)(3)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ordnet man im zweiten Fall von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{fuenffarbensatz}
\end_layout

\end_inset

 verbundene Knoten im Kreis an, können nicht alle Paare 
\begin_inset Quotes gld
\end_inset

sich gegenüberliegender
\begin_inset Quotes grd
\end_inset

 Knoten verbunden sein, da 
\begin_inset Formula $G$
\end_inset

 sonst nicht planar wäre.
 Somit bleibt eine Farbe für 
\begin_inset Formula $v$
\end_inset

 übrig.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Listenfärbung
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Listenfärbungsproblem
\end_layout

\end_inset

Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und ein 
\begin_inset Formula $k\in\mathbb{N}$
\end_inset

, gibt es für jede beliebige Zuordnung 
\begin_inset Formula $s_{v}$
\end_inset

, 
\begin_inset Formula $v\in V$
\end_inset

 mit 
\begin_inset Formula $\left|s_{v}\right|=k$
\end_inset

 (
\begin_inset Formula $s_{v}$
\end_inset

 ist eine 
\begin_inset Quotes gld
\end_inset

Liste
\begin_inset Quotes grd
\end_inset

 von Farben) eine 
\begin_inset Quotes gld
\end_inset

korrekte
\begin_inset Quotes grd
\end_inset

 Knotenfärbung, bei der die Farbe jedes Knoten 
\begin_inset Formula $v$
\end_inset

 aus seiner Liste 
\begin_inset Formula $s_{v}$
\end_inset

 ist?
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $k$
\end_inset

-Listenfärbbarkeit
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Listenfärbbarkeit
\end_layout

\end_inset

Existiert zu einem Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 für jede beliebige Zuordnung von Listen 
\begin_inset Formula $s_{v}$
\end_inset

, 
\begin_inset Formula $\left|s_{v}\right|=k$
\end_inset

 zu jedem 
\begin_inset Formula $v\in V$
\end_inset

 eine korrekte Listenfärbung, so heißt 
\begin_inset Formula $G$
\end_inset

 
\noun on

\begin_inset Formula $k$
\end_inset

-listenfärbbar
\noun default
.
\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Vierlistenfärbbarkeit|hide
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{nicht-4-listen}
\end_layout

\end_inset

Es gibt planare Graphen, die nicht 4-listenfärbbar sind.
\end_layout

\begin_layout Proof
Es wird ein Gegenbeispiel konstruiert.
 Basis des Beispiels ist eine (unvollständige) Listenfärbungsinstanz 
\begin_inset Formula $I$
\end_inset

 mit fünf Knoten.
 Diese hat die 
\begin_inset Quotes gld
\end_inset

vis-à-vis
\begin_inset Quotes grd
\end_inset

-Eigenschaft: In jeder korrekten Färbung haben zwei gegenüberliegende Knoten
 die selbe Farbe (vgl.
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "nicht-vier-listen-i"

\end_inset

).
\end_layout

\begin_layout Proof
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.6}
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Welsh]
\end_layout

\begin_layout Plain Layout

	
\backslash
footnotesize
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[L={[1,2,3,4]}]{1} % 1,2,3,4
\end_layout

\begin_layout Plain Layout

	
\backslash
NOWE[L={[1,2,4]},Lpos=135](1){2} % 1,2,4
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[1,2,3]},Lpos=45](1){3} % 1,2,3
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[1,3,4]},Lpos=-45](1){4} % 1,3,4
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[L={[2,3,4]},Lpos=-135](1){5} % 2,3,4
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(1,2,3,4,5,2,1,5)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(1)(3)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(1)(4)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "nicht-vier-listen-i"

\end_inset

Die Instanz 
\begin_inset Formula $I$
\end_inset

 im Beispiel von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{nicht-4-listen}
\end_layout

\end_inset

.
 Eine korrekte Färbung weist mindestens zwei gegenüberliegenden Knoten die
 selbe Farbe zu.
 Andernfalls würden vier Farben für die äußeren Knoten verwendet und der
 mittlere Knoten könnte nicht korrekt gefärbt werden.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Aus fünf 
\begin_inset Formula $I$
\end_inset

-Instanzen wird ein Graph 
\begin_inset Formula $H$
\end_inset

 konstruiert.
 Hieraus folgt, dass wenn den 3-elementigen Listen der äußeren Knoten eine
 weitere Farbe hinzugefügt wird, diese Farbe in einer korrekten Färbung
 von 
\begin_inset Formula $H$
\end_inset

 auch verwendet wird.
\end_layout

\begin_layout Proof
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Welsh]
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.6}
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{VertexStyle/.append style={minimum size=15pt}}
\end_layout

\begin_layout Plain Layout

	
\backslash
footnotesize
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[L={[1,2,3,4]}]{11}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOWE[L={[1,2,4]},Lpos=135](11){21}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[2,3,4]},Lpos=135](11){31} 
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[L={[1,3,4]},Lpos=-135](11){51}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[1,2,3]},Lpos=-135](11){41} 
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(11,21,31,41,51,21,11,51)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(11)(31)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(11)(41)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[1,2,3,4]}](31){12}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[1,3,4]},Lpos=45](12){22}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[1,2,4]},Lpos=-45](12){32}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(31,12,22,32,12,41)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(31)(22)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[1,2,3,4]}](31){13}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOWE[L={[1,2,4]},Lpos=135](13){23}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[1,2,3]},Lpos=45](13){33}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(31,13,23,33,13,22,33)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(31)(23)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[1,2,3,4]}](22){14}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[1,2,3]},Lpos=45](14){24}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[2,3,4]},Lpos=-45](14){34}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(22,24,34,32,14,22)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(24,14,34)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[1,2,3,4]}](41){15}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[L={[1,3,4]},Lpos=-135](15){25}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[2,3,4]},Lpos=-45](15){35}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(41,25,15,35,32,41,15,32)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(25)(35)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "nicht-vier-listen-h"

\end_inset

Der Graph 
\begin_inset Formula $H$
\end_inset

 im Beispiel von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{nicht-4-listen}
\end_layout

\end_inset

.
 Er ist nicht korrekt färbbar, solange den Listen der äußeren Knoten nicht
 eine weiter Farbe hinzugefügt wird.
 Denn jede Färbung von 
\begin_inset Formula $H$
\end_inset

, die die angegebenen Listen respektiert, bricht die vis-à-vis-Eigenschaft
 einer der 
\begin_inset Formula $I$
\end_inset

-Instanzen in 
\begin_inset Formula $H$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Proof
Nun kann das Gegenbeispiel konstruiert werden.
 Es besteht aus vier Instanzen von 
\begin_inset Formula $H$
\end_inset

: 
\begin_inset Formula $H_{1},H_{2},H_{3},H_{4}$
\end_inset

.
 Den Listen aller äußeren Knoten einer Instanz 
\begin_inset Formula $H_{i}$
\end_inset

 wird eine neue Farbe 
\begin_inset Formula $f_{i}$
\end_inset

 mit 
\begin_inset Formula $f_{i}\neq f_{j}\iff i\neq j$
\end_inset

 zugewiesen.
 Die äußeren Knoten aller Instanzen werden nun mit einem einzigen Knoten
 
\begin_inset Formula $x$
\end_inset

 verbunden (was planar möglich ist).
 Dieser Knoten erhält als Liste [
\begin_inset Formula $f_{1}$
\end_inset

,
\begin_inset Formula $f_{2}$
\end_inset

,
\begin_inset Formula $f_{3}$
\end_inset

,
\begin_inset Formula $f_{4}$
\end_inset

].
 Der so konstruierte Graph kann keine korrekte Färbung haben.
 Denn erhält 
\begin_inset Formula $x$
\end_inset

 die Farbe 
\begin_inset Formula $f_{k}$
\end_inset

 , so kann 
\begin_inset Formula $H_{k}$
\end_inset

 nicht mehr korrekt gefärbt werden.
\end_layout

\begin_layout Proof
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fbox{
\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Welsh]
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.6}
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{VertexStyle/.append style={minimum size=15pt}}
\end_layout

\begin_layout Plain Layout

	
\backslash
footnotesize
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}]{11}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color4}4]},Lpos=135](11){21}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=135](11){31} 
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-135](11){51}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3]},Lpos=-135](11){41} 
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(11,21,31,41,51,21,11,51)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(11)(31)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(11)(41)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](31){12}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=45](12){22}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color4}4]},Lpos=-45](12){32}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(31,12,22,32,12,41)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(31)(22)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](31){13}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color4}4]},Lpos=135](13){23}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3]},Lpos=45](13){33}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(31,13,23,33,13,22,33)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(31)(23)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](22){14}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3]},Lpos=45](14){24}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-45](14){34}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(22,24,34,32,14,22)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(24,14,34)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](41){15}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-135](15){25}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-45](15){35}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(41,25,15,35,32,41,15,32)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(25)(35)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color3}{33,31,51}
\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color4}{23,22,34}
\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color2}{21,41,35}
\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color1}{24,32,25}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fbox{
\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
GraphInit[vstyle=Welsh]
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.6}
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{VertexStyle/.append style={minimum size=15pt}}
\end_layout

\begin_layout Plain Layout

	
\backslash
footnotesize
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}]{11}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color4}4]},Lpos=135](11){21}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=135](11){31} 
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-135](11){51}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3]},Lpos=-135](11){41} 
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(11,21,31,41,51,21,11,51)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(11)(31)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(11)(41)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](31){12}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=45](12){22}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color4}4]},Lpos=-45](12){32}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(31,12,22,32,12,41)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(31)(22)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](31){13}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color4}4]},Lpos=135](13){23}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3]},Lpos=45](13){33}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(31,13,23,33,13,22,33)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(31)(23)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](22){14}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3]},Lpos=45](14){24}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-45](14){34}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(22,24,34,32,14,22)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(24,14,34)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]}](41){15}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[L={[
\backslash
textcolor{color1}1,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-135](15){25}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[L={[
\backslash
textcolor{color2}2,
\backslash
textcolor{color3}3,
\backslash
textcolor{color4}4]},Lpos=-45](15){35}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edges(41,25,15,35,32,41,15,32)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(25)(35)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color3}{31}
\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color4}{22}
\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color2}{41}
\end_layout

\begin_layout Plain Layout

	
\backslash
AddVertexColor{color1}{24,32,25}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Fünflistenfärbbarkeit|hide
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{fuenf-listen}
\end_layout

\end_inset

Jeder planare Graph ist 5-Listenfärbbar
\end_layout

\begin_layout Proof
Vollständige Induktion über 
\begin_inset Formula $\left|V\right|=n$
\end_inset

.
 Es wird eine stärkere Behauptung bewiesen.
\end_layout

\begin_deeper
\begin_layout Claim*
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset Formula $*$
\end_inset


\end_layout

\end_inset

Falls 
\begin_inset Formula $G$
\end_inset

 planar ist und
\end_layout

\begin_deeper
\begin_layout Itemize
jede innere Facette ein Dreieck (bezüglich einer beliebigen planaren Einbettung)
 bildet
\end_layout

\begin_layout Itemize
die äußere Facette durch einen Kreis 
\begin_inset Formula $C=v_{1},v_{2},\dots,v_{k},v_{1}$
\end_inset

 begrenzt ist
\end_layout

\begin_layout Itemize
\begin_inset Formula $v_{1}$
\end_inset

 mit der Farbe 1 und 
\begin_inset Formula $v_{2}$
\end_inset

 mit der Farbe 2 gefärbt ist
\end_layout

\begin_layout Itemize
jedem Knoten eine Liste mit mindestens drei Farben zugeordnet ist
\end_layout

\begin_layout Itemize
jedem Knoten in 
\begin_inset Formula $G-C$
\end_inset

 eine Liste mit mindestens fünf Farben zugeordnet ist
\end_layout

\end_deeper
\begin_layout Claim*
dann ist 
\begin_inset Formula $G$
\end_inset

 unter Berücksichtigung der Listen und Farben von 
\begin_inset Formula $v_{1}$
\end_inset

 und 
\begin_inset Formula $v_{2}$
\end_inset

 korrekt färbbar.
\end_layout

\end_deeper
\begin_layout Proof
Offensichtlich folgt aus 
\begin_inset Formula $\left(*\right)$
\end_inset

 die 5-Listenfärbbarkeit.
\end_layout

\begin_deeper
\begin_layout Paragraph
Induktionsschritt
\end_layout

\end_deeper
\begin_layout Proof
Sei 
\begin_inset Formula $\left|V\right|\ge4$
\end_inset

, 
\begin_inset Formula $G$
\end_inset

 planar und 
\begin_inset Formula $C$
\end_inset

 der Kreis, der die äußere Facette begrenzt.
\end_layout

\begin_deeper
\begin_layout Case
C enthält eine Sehne 
\begin_inset Formula $\left\{ v,w\right\} $
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
def
\backslash
d{3}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=210,d=
\backslash
d]{v}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=30,d=
\backslash
d]{w}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=150,d=
\backslash
d]{v_1}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=120,d=
\backslash
d]{v_2}
\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{VertexStyle/.append style={draw=none}}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=180,d=
\backslash
d,NoLabel]{1}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex[a=60,d=
\backslash
d,NoLabel]{2}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={ultra thick}](v)(w)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(v_1)(v_2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
tikzset{EdgeStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(v)(1)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge(2)(w)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
draw (w) -- ($ (w) + (2,2) $);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fall 1 im Beweis von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{fuenf-listen}
\end_layout

\end_inset

: 
\begin_inset Formula $G$
\end_inset

 enthält eine Sehne 
\begin_inset Formula $\left\{ v,w\right\} $
\end_inset

.
 Sie trennt 
\begin_inset Formula $G$
\end_inset

 eindeutig in 
\begin_inset Formula $G_{1}$
\end_inset

 und 
\begin_inset Formula $G_{2}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\left\{ v,w\right\} $
\end_inset

 liegt auf zwei eindeutig bestimmten Kreisen 
\begin_inset Formula $C_{1}$
\end_inset

 und 
\begin_inset Formula $C_{2}$
\end_inset

, welche eindeutig zwei Graphen 
\begin_inset Formula $G_{1},G_{2}$
\end_inset

 induzieren.
 
\begin_inset Formula $v_{1}$
\end_inset

 und 
\begin_inset Formula $v_{2}$
\end_inset

 liegen, da sie benachbart sind, im selben Teilgraphen (oder sind selbst
 
\begin_inset Formula $v$
\end_inset

 oder 
\begin_inset Formula $w$
\end_inset

).
 O.B.d.A seien 
\begin_inset Formula $v_{1}$
\end_inset

 und 
\begin_inset Formula $v_{2}$
\end_inset

 in 
\begin_inset Formula $G_{1}$
\end_inset

.
 Die Induktionsvoraussetzung kann auf 
\begin_inset Formula $G_{1}$
\end_inset

 angewendet werden.
 Danach kann die Induktionsvoraussetzung auf 
\begin_inset Formula $G_{2}$
\end_inset

 mit 
\begin_inset Formula $v$
\end_inset

 und 
\begin_inset Formula $w$
\end_inset

 in den Rollen von 
\begin_inset Formula $v_{1}$
\end_inset

 und 
\begin_inset Formula $v_{2}$
\end_inset

 und den Farben aus der Färbung von 
\begin_inset Formula $G_{1}$
\end_inset

 angewandt werden.
\end_layout

\end_deeper
\begin_layout Case
\begin_inset Formula $G$
\end_inset

 enthält keine Sehne.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
SetGraphUnit{1.5}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertex{v_k}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA(v_k){v_1}
\end_layout

\begin_layout Plain Layout

	
\backslash
NOEA(v_1){v_2}
\end_layout

\begin_layout Plain Layout

	
\backslash
EA[unit=2](v_2){v_3}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA(v_3){w}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA(w){1}
\end_layout

\begin_layout Plain Layout

	
\backslash
SO[unit=2,NoLabel](1){2}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOWE[NoLabel](2){3}
\end_layout

\begin_layout Plain Layout

	
\backslash
SO[unit=2](v_k){v}
\end_layout

\begin_layout Plain Layout

	
\backslash
SOEA[NoLabel](v){4}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style=thick](v)(w)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Nachbarn 
\begin_inset Formula $v_{k-1},u_{1},\dots,u_{l},v_{1}$
\end_inset

 von 
\begin_inset Formula $v_{k}$
\end_inset

 bilden einen Weg 
\begin_inset Formula $P$
\end_inset

, da alle inneren Facetten von 
\begin_inset Formula $G$
\end_inset

 Dreiecke sind.
 
\begin_inset Formula $\left(G-v_{k}\right)\cup P\eqqcolon C'$
\end_inset

 ist wiederum ein Kreis.
 Reserviere nun zwei Farben (die nicht die Farbe von 
\begin_inset Formula $v_{1}$
\end_inset

 sind) aus der Liste von 
\begin_inset Formula $v_{k}$
\end_inset

 und streiche sie ggf.
 aus den Listen von 
\begin_inset Formula $u_{1},\dots,u_{l}$
\end_inset

.
 Sei 
\begin_inset Formula $G'$
\end_inset

 der durch 
\begin_inset Formula $C'$
\end_inset

 induzierte Subgraph von 
\begin_inset Formula $G$
\end_inset

.
 
\begin_inset Formula $G'$
\end_inset

 erfüllt die Induktionsvoraussetzung.
 Höchstens eine der reservierten Farben wird für 
\begin_inset Formula $v_{k-1}$
\end_inset

 verbraucht.
 Also lässt sich 
\begin_inset Formula $v_{k}$
\end_inset

 auch korrekt färben.
\end_layout

\end_deeper
\end_deeper
\begin_layout Chapter
Separatoren von planaren Graphen
\end_layout

\begin_layout Section
Planar Separator Theorem
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Separator
\end_layout

\end_inset

 Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph.
 
\begin_inset Formula $S\subset V$
\end_inset

 heißt 
\noun on
Separator
\noun default
 von 
\begin_inset Formula $G$
\end_inset

 wenn der durch 
\begin_inset Formula $V\backslash S$
\end_inset

 induzierte Subgraph 
\begin_inset Formula $G_{S}$
\end_inset

 von 
\begin_inset Formula $G$
\end_inset

 nicht zusammenhängend ist.
 
\begin_inset Formula $S$
\end_inset

 
\noun on
trennt
\noun default
 zwei Knoten 
\begin_inset Formula $u,v\in V\backslash S$
\end_inset

, falls sich 
\begin_inset Formula $u$
\end_inset

 und 
\begin_inset Formula $v$
\end_inset

 in 
\begin_inset Formula $G_{S}$
\end_inset

 in verschiedenen Zusammenhangskomponenten befinden.
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Min Bounded Separator Problem
\end_layout

\end_inset

 Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph und 
\begin_inset Formula $\frac{1}{2}\le\alpha<1$
\end_inset

.
 Finde eine Partition 
\begin_inset Formula $V_{1},V_{2},S$
\end_inset

 von 
\begin_inset Formula $V$
\end_inset

 wobei 
\begin_inset Formula $S$
\end_inset

 ein Separator minimaler Kardinalität und 
\begin_inset Formula $\left|V_{1}\right|\le\alpha\left|V\right|,\left|V_{2}\right|\le\alpha\left|V\right|$
\end_inset

 ist.
 Idealerweise ist dabei 
\begin_inset Formula $\alpha=\frac{1}{2}$
\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
BFS-Baum
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
BFS-Baum!Level
\end_layout

\end_inset

Zu einem Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 heißt der durch eine von 
\begin_inset Formula $w\in V$
\end_inset

 ausgehende Breitensuche in 
\begin_inset Formula $G$
\end_inset

 induzierte Baum 
\begin_inset Formula $T\left(G\right)=\left(V,E\left(T\right)\right)$
\end_inset

 der 
\noun on
aufgespannte Baum
\noun default
 beziehungsweise 
\noun on
BFS-Baum
\noun default
 von 
\begin_inset Formula $G$
\end_inset

 mit Wurzel 
\begin_inset Formula $w$
\end_inset

.
 Die Länge des Weges von 
\begin_inset Formula $v\in V$
\end_inset

 zu 
\begin_inset Formula $w$
\end_inset

 in 
\begin_inset Formula $T$
\end_inset

 wird 
\noun on
Höhe
\noun default
 oder 
\noun on
Level
\noun default
 von 
\begin_inset Formula $v$
\end_inset

 genannt.
 Zu einem Level 
\begin_inset Formula $i$
\end_inset

 bezeichne 
\begin_inset Formula $s_{i}$
\end_inset

 die Menge der Knoten mit Level 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Remark*
Jedes 
\begin_inset Formula $s_{i}$
\end_inset

, 
\begin_inset Formula $i>0$
\end_inset

 ist ein Separator in 
\begin_inset Formula $G$
\end_inset

, da in einem BFS-Baum nur Kanten zwischen Knoten aus demselben oder aus
 aufeinander folgenden Leveln existiert.
\end_layout

\begin_layout Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{planar-wichtig}
\end_layout

\end_inset

Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein planarer, zusammenhängender Graph mit 
\begin_inset Formula $\left|V\right|\ge5$
\end_inset

 und 
\begin_inset Formula $T=\left(V,E\left(T\right)\right)$
\end_inset

 ein aufspannender Baum von 
\begin_inset Formula $G$
\end_inset

 mit Wurzel 
\begin_inset Formula $w$
\end_inset

 und Höhe 
\begin_inset Formula $h$
\end_inset

.
 Dann kann 
\begin_inset Formula $V$
\end_inset

 so in drei Mengen 
\begin_inset Formula $V_{1},V_{2},S$
\end_inset

 partitioniert werden, dass
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\left|V_{1}\right|,\left|V_{2}\right|\leq\frac{2}{3}n$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 ein Separator ist, der 
\begin_inset Formula $V_{1}$
\end_inset

 und 
\begin_inset Formula $V_{2}$
\end_inset

 trennt
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left|S\right|\leq2h+1$
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Trianguliere 
\begin_inset Formula $G$
\end_inset

.
 Eine Nichtbaumkante 
\begin_inset Formula $\left\{ x,y\right\} \in E\backslash E\left(T\right)$
\end_inset

 induziert einen Kreis 
\begin_inset Formula $K_{xy}$
\end_inset

, der von 
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

 aus über Baumkanten zum gemeinsamen Elternknoten von 
\begin_inset Formula $x$
\end_inset

 und 
\begin_inset Formula $y$
\end_inset

 maximalen Levels in 
\begin_inset Formula $T$
\end_inset

 geschlossen wird.
 Jedes 
\begin_inset Formula $K_{xy}$
\end_inset

 enthält maximal 
\begin_inset Formula $2h+1$
\end_inset

 Knoten.
 
\end_layout

\begin_layout Proof
Wähle also eine beliebige Nichtbaumkante 
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

.
 Sei o.B.d.A.
 
\begin_inset Formula $\left|\text{Inneres}\left(K_{xy}\right)\right|>\frac{2}{3}n$
\end_inset

.
 
\begin_inset Formula $\text{Inneres}\left(K_{xy}\right)$
\end_inset

 wird nun systematisch verkleinert (Falls 
\begin_inset Formula $\left|\text{Äußeres}\left(K_{xy}\right)\right|>\frac{2}{3}n$
\end_inset

 wird das Äußere verkleinert).
\end_layout

\begin_layout Proof
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

 begrenzt ein Dreieck in 
\begin_inset Formula $\text{Inneres}\left(K_{xy}\right)$
\end_inset

, da 
\begin_inset Formula $G$
\end_inset

 trianguliert ist.
 Sei 
\begin_inset Formula $xty$
\end_inset

 dieses Dreieck.
 Sei o.B.d.A.
 
\begin_inset Formula $\left\{ x,t\right\} $
\end_inset

 Nichtbaumkante.
 
\begin_inset Formula $K_{xy}$
\end_inset

 soll nun durch 
\begin_inset Formula $K_{xt}$
\end_inset

 ersetzt werden.
\end_layout

\begin_deeper
\begin_layout Case
\begin_inset Formula $\left\{ y,t\right\} $
\end_inset

 ist Baumkante
\end_layout

\begin_deeper
\begin_layout Case
\begin_inset Formula $t\notin K_{xy}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $t$
\end_inset

 ist in 
\begin_inset Formula $T$
\end_inset

 also Kind von 
\begin_inset Formula $y$
\end_inset

.
 
\begin_inset Formula $y$
\end_inset

 bleibt somit in 
\begin_inset Formula $K_{xt}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\left|\text{Äußeres}\left(K_{xt}\right)\right| & =\left|\text{Äußeres}\left(K_{xy}\right)\right|\\
\left|\text{Inneres}\left(K_{xt}\right)\right| & =\left|\text{Inneres}\left(K_{xy}\right)\right|-1
\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Case
\begin_inset Formula $t\in K_{xy}$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $y$
\end_inset

 ist in 
\begin_inset Formula $T$
\end_inset

 also Kind von 
\begin_inset Formula $t$
\end_inset

.
 
\begin_inset Formula $y$
\end_inset

 wird somit Äußeres:
\begin_inset Formula 
\begin{align*}
\left|\text{Äußeres}\left(K_{xt}\right)\right| & =\left|\text{Äußeres}\left(K_{xy}\right)\right|+1\\
\left|\text{Inneres}\left(K_{xt}\right)\right| & =\left|\text{Inneres}\left(K_{xy}\right)\right|
\end{align*}

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Case
\begin_inset Formula $\left\{ y,t\right\} $
\end_inset

 ist Nichtbaumkante
\end_layout

\begin_deeper
\begin_layout Standard
o.B.d.A ist 
\begin_inset Formula $\left|\text{Inneres}\left(K_{xt}\right)\right|\geq\left|\text{Inneres}\left(K_{ty}\right)\right|$
\end_inset

 und somit 
\begin_inset Formula $\left|\text{Inneres}\left(K_{xt}\right)\right|\ge\frac{1}{2}\left|\text{Inneres}\left(K_{xy}\right)\right|$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\left|\text{Äußeres}\left(K_{xt}\right)\right| & \leq n-\frac{1}{2}\left|\text{Inneres}\left(K_{xy}\right)\right|\leq\frac{2}{3}n\\
\left|\text{Inneres}\left(K_{xt}\right)\right| & \leq\left|\text{Inneres}\left(K_{xy}\right)\right|-1
\end{align*}

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Proof
In jedem Fall kann also 
\begin_inset Formula $\text{Inneres}\left(K_{xy}\right)$
\end_inset

 verkleinert werden, ohne dass 
\begin_inset Formula $\text{Äußeres}\left(K_{xy}\right)$
\end_inset

 zu groß wird.
 Die Ersetzungen können durchgeführt werden, bis 
\begin_inset Formula 
\[
\frac{1}{3}n<\left|\text{Inneres}\left(K_{xy}\right)\right|\leq\frac{2}{3}n
\]

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[rotate=90]
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices[unit=5]{circle}{11,12,13}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices[unit=4]{circle}{21,22,23}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices[unit=3]{circle}{31,32,33}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices[unit=2]{circle}{41,42,43}
\end_layout

\begin_layout Plain Layout

	
\backslash
Vertices[unit=1]{circle}{51,52,53}
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={ultra thick}](11)(21)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={ultra thick}](11)(12)
\end_layout

\begin_layout Plain Layout

	
\backslash
Edge[style={ultra thick}](11)(13)
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Implementierung von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{planar-wichtig}
\end_layout

\end_inset

 in 
\begin_inset Formula $\mathcal{O}\left(n\right)$
\end_inset


\end_layout

\begin_layout Standard
Da 
\begin_inset Formula $G$
\end_inset

 trianguliert ist, gilt nach dem Satz von Euler (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{euler}
\end_layout

\end_inset

) 
\begin_inset Formula $f=2n-4$
\end_inset

.
 Das obige Verfahren endet somit nach höchstens 
\begin_inset Formula $f=2n-4$
\end_inset

 Ersetzungen.
 Der Aufwand eines einzelnen Übergangs ist, abgesehen vom Vergleich 
\begin_inset Formula $\left|\text{Inneres}\left(K_{xt}\right)\right|\geq\left|\text{Inneres}\left(K_{yt}\right)\right|$
\end_inset

 in Fall 2, in 
\begin_inset Formula $\mathcal{O}\left(1\right)$
\end_inset

.
 Nach Bestimmung der Nichtbaumkante 
\begin_inset Formula $\left\{ x,y\right\} $
\end_inset

 wird eine einmalige Vorabrechnung vorgenommen: 
\end_layout

\begin_layout Itemize
Speichere für jeden Knoten 
\begin_inset Formula $v$
\end_inset

 seine inzidente Baumkante und die Anzahl der Knoten im Unterbaum mit Wurzel
 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Itemize
markiere alle Knoten auf 
\begin_inset Formula $K_{xy}$
\end_inset


\end_layout

\begin_layout Itemize
berechne damit 
\begin_inset Formula $\left|\text{Äußeres}\left(K_{xy}\right)\right|$
\end_inset

 und 
\begin_inset Formula $\left|\text{Inneres}\left(K_{xy}\right)\right|$
\end_inset


\end_layout

\begin_layout Standard
Um 
\begin_inset Formula $\left|\text{Inneres}\left(K_{xt}\right)\right|$
\end_inset

 und 
\begin_inset Formula $\left|\text{Inneres}\left(K_{yt}\right)\right|$
\end_inset

 zu berechnen, sei o.B.d.A.
 
\begin_inset Formula $x$
\end_inset

 links von 
\begin_inset Formula $y$
\end_inset

.
 Verfahre wie folgt:
\end_layout

\begin_layout Itemize
Laufe von 
\begin_inset Formula $t$
\end_inset

 im Baum nach oben bis zum ersten Knoten 
\begin_inset Formula $v$
\end_inset

 auf 
\begin_inset Formula $K_{xy}$
\end_inset

 und berechne die Anzahlen 
\begin_inset Formula $a_{t}$
\end_inset

 der Knoten 
\emph on
auf
\emph default
 dem Pfad 
\begin_inset Formula $\overline{tv}$
\end_inset

, 
\begin_inset Formula $r_{t}$
\end_inset

 der Knoten 
\emph on
rechts
\emph default
 vom Pfad 
\begin_inset Formula $\overline{tv}$
\end_inset

 und 
\begin_inset Formula $l_{t}$
\end_inset

 
\emph on
links
\emph default
 vom Pfad 
\begin_inset Formula $\overline{tv}$
\end_inset

.
\end_layout

\begin_layout Itemize
Laufe von 
\begin_inset Formula $x$
\end_inset

 und 
\begin_inset Formula $y$
\end_inset

 
\emph on
abwechselnd
\emph default
 im Baum nach oben bis zum 
\emph on
ersten Mal
\emph default
 
\begin_inset Formula $v$
\end_inset

 erreicht wird.
 Berechne dabei die Anzahl 
\begin_inset Formula $I_{x}$
\end_inset

 der Knoten rechts des Pfades ab 
\begin_inset Formula $x$
\end_inset

 bzw.
 die Anzahl 
\begin_inset Formula $I_{y}$
\end_inset

 der Knoten links des Pfades ab 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout Standard
Sei o.B.d.A.
 
\begin_inset Formula $v$
\end_inset

 zuerst von 
\begin_inset Formula $x$
\end_inset

 aus erreicht worden.
 Dann gilt
\begin_inset Formula 
\begin{align*}
\text{Inneres}\left(K_{xt}\right) & =I_{x}+l_{t}\\
\text{Inneres}\left(K_{yt}\right) & =\left|\text{Inneres}\left(K_{xy}\right)\right|-I_{x}-l_{t}-a_{t}
\end{align*}

\end_inset


\end_layout

\begin_layout Remark*
Es kann keine Baumkante geben, die aus dem Inneren von 
\begin_inset Formula $K_{xy}$
\end_inset

 ins Äußere führt.
 Daher ist jeder Unterbaum, dessen Wurzel im Inneren von 
\begin_inset Formula $K_{xy}$
\end_inset

 liegt, auch vollständig innerhalb von 
\begin_inset Formula $K_{xy}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Da der Aufwand der Berechnung linear in der Größe des Teils von 
\begin_inset Formula $K_{xy}$
\end_inset

 ist, der 
\emph on
nicht
\emph default
 weiter betrachtet wird, wird jeder Knoten höhchstens einmal in die Berechnung
 aufgenommen.
 Der Aufwand bleibt also amortisiert in 
\begin_inset Formula $\mathcal{O}\left(n\right)$
\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Planar Separator Theorem
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{planar-separator}
\end_layout

\end_inset

 Die Knotenmenge eines planaren, zusammenhängenden Graphen 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

, 
\begin_inset Formula $\left|V\right|\geq5$
\end_inset

 kann so in 
\begin_inset Formula $V_{1},V_{2},S$
\end_inset

 partitioniert werden, dass
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\left|V_{1}\right|,\left|V_{2}\right|\leq\frac{2}{3}n$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 Separator, der 
\begin_inset Formula $V_{1}$
\end_inset

 und 
\begin_inset Formula $V_{2}$
\end_inset

 trennt
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left|S\right|\leq4\sqrt{n}$
\end_inset


\end_layout

\end_deeper
\begin_layout Proposition
Diese Partitionierung kann in 
\begin_inset Formula $\mathcal{O}\left(n\right)$
\end_inset

 konstruiert werden.
\end_layout

\begin_layout Proof
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Beweis und Algorithmus
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Trianguliere 
\begin_inset Formula $G$
\end_inset


\end_layout

\begin_layout Enumerate
Wähle Wurzel; berechne BFS-Baum
\end_layout

\begin_layout Enumerate
Bestimme Level 
\begin_inset Formula $\mu$
\end_inset

 sodass 
\begin_inset Formula $\sum_{i=0}^{\mu-1}\left|s_{i}\right|\leq\frac{n}{2}$
\end_inset

, aber 
\begin_inset Formula $\sum_{i=0}^{\mu}\left|s_{i}\right|>\frac{n}{2}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $m\gets$
\end_inset

größtes Level kleiner als 
\begin_inset Formula $\mu$
\end_inset

, sodass 
\begin_inset Formula $\left|s_{m}\right|\leq\sqrt{n}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $M\gets$
\end_inset

kleinstes Level größer als 
\begin_inset Formula $\mu$
\end_inset

, sodass 
\begin_inset Formula $\left|s_{M}\right|\leq\sqrt{n}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $h\gets$
\end_inset

 Höhe des BFS-Baums
\begin_inset Formula 
\begin{align*}
A_{1} & \coloneqq\bigcup_{i=0}^{m-1}s_{i} & A_{2} & \coloneqq\bigcup_{i=m+1}^{M-1}s_{i} & A_{3} & \coloneqq\bigcup_{i=M+1}^{h}s_{i}
\end{align*}

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
def
\backslash
w{4}
\end_layout

\begin_layout Plain Layout

	
\backslash
def
\backslash
h{.6}
\end_layout

\begin_layout Plain Layout

	
\backslash
def
\backslash
mh{4 * 
\backslash
s}
\end_layout

\begin_layout Plain Layout

	
\backslash
def
\backslash
s{1.5}
\end_layout

\begin_layout Plain Layout

	
\backslash
def
\backslash
outer{($(-
\backslash
w,-
\backslash
mh) - (0,
\backslash
h)$) -- (0,0) -- ($(
\backslash
w,-
\backslash
mh) - (0,
\backslash
h)$) -- cycle}
\end_layout

\begin_layout Plain Layout

	
\backslash
draw 
\backslash
outer;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}
\end_layout

\begin_layout Plain Layout

	
\backslash
clip 
\backslash
outer;
\end_layout

\begin_layout Plain Layout

	
\backslash
newcommand{
\backslash
level}[3][
\backslash
h]{
\end_layout

\begin_layout Plain Layout

		
\backslash
draw (-
\backslash
w,-#2) rectangle ($(
\backslash
w,-#2) - (0,#1)$);
\end_layout

\begin_layout Plain Layout

		
\backslash
node at ($(0,-#2) - (0,#1 * 0.5)$){#3};
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\backslash
newcommand{
\backslash
dddots}[2][
\backslash
h]{
\end_layout

\begin_layout Plain Layout

		
\backslash
node [text height=1em, text centered] at ($(0,-#2) - (0,#1 * 0.5) - (0,
\backslash
s * 0.5)$) {$
\backslash
vdots$};
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\backslash
level[.8]{0 * 
\backslash
s}{
\backslash
vspace{1em}$s_0$}
\end_layout

\begin_layout Plain Layout

	
\backslash
dddots[.8]{0}
\end_layout

\begin_layout Plain Layout

	
\backslash
level{1 * 
\backslash
s}{$s_m$}
\end_layout

\begin_layout Plain Layout

	
\backslash
dddots{1 * 
\backslash
s}
\end_layout

\begin_layout Plain Layout

	
\backslash
level{2 * 
\backslash
s}{$s_
\backslash
mu$}
\end_layout

\begin_layout Plain Layout

	
\backslash
dddots{2 * 
\backslash
s}
\end_layout

\begin_layout Plain Layout

	
\backslash
level{3 * 
\backslash
s}{$s_M$}
\end_layout

\begin_layout Plain Layout

	
\backslash
dddots{3 * 
\backslash
s}
\end_layout

\begin_layout Plain Layout

	
\backslash
level{4 * 
\backslash
s}{$s_h$}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
newcommand{
\backslash
treebrace}[3]{
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[decorate,decoration={brace,amplitude=5pt}] ($(
\backslash
w + 1, -#1)$) -- ($(
\backslash
w + 1,-#2)$) node[midway,right,xshift=5pt]{#3};
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\backslash
treebrace{0 * 
\backslash
s}{1 * 
\backslash
s}{$A_1$}
\end_layout

\begin_layout Plain Layout

	
\backslash
treebrace{1 * 
\backslash
s - 
\backslash
h}{3 * 
\backslash
s}{$A_2$}
\end_layout

\begin_layout Plain Layout

	
\backslash
treebrace{3 * 
\backslash
s - 
\backslash
h}{4 * 
\backslash
s - 
\backslash
h}{$A_3$}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schematische Einteilung des BFS-Baums im Algorithmus zu 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{planar-separator}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{0pt}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Case
\begin_inset Formula $\left|A_{2}\right|\leq\frac{2}{3}n$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\begin{align*}
S & \gets S_{m}\cup S_{M}\\
V_{1} & \gets\underset{A\in\left\{ A_{1},A_{2},A_{3}\right\} }{\text{argmax}}\left|A\right|\\
V_{2} & \gets V\backslash\left(S\cup V_{1}\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Aufgrund der Wahl von 
\begin_inset Formula $m$
\end_inset

 und 
\begin_inset Formula $M$
\end_inset

 gilt 
\begin_inset Formula $\left|A_{1}\right|\leq\frac{n}{2}$
\end_inset

 und 
\begin_inset Formula $\left|A_{3}\right|<\frac{n}{2}$
\end_inset

.
 Mit 
\begin_inset Formula $\left|A_{2}\right|\leq\frac{2}{3}n$
\end_inset

 folgt 
\begin_inset Formula 
\begin{align*}
\left|V_{1}\right| & \leq\frac{2}{3}n\\
\left|V_{2}\right| & \leq n-\left|V_{1}\right|
\end{align*}

\end_inset

 Da 
\begin_inset Formula $\left|V_{1}\right|=\max\left\{ \left|A_{1}\right|,\left|A_{2}\right|,\left|A_{3}\right|\right\} \geq\frac{\left|V_{2}\right|}{2}$
\end_inset

 gilt, gilt auch 
\begin_inset Formula 
\[
\left|V_{2}\right|\leq n-\left|V_{1}\right|\leq\frac{2}{3}n
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Case
\begin_inset Formula $\left|A_{2}\right|>\frac{2}{3}n$
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Standard
Verschmelze 
\begin_inset Formula $A_{1}\cup s_{m}$
\end_inset

 zu einem Knoten 
\begin_inset Formula $W$
\end_inset

 und entferne 
\begin_inset Formula $s_{M}\cup A_{3}$
\end_inset

.
 Betrachte dadurch induzierten Graphen 
\begin_inset Formula $G'=\left(V',E'\right)$
\end_inset

 und entsprechenden BFS-Baum 
\begin_inset Formula $T'$
\end_inset

.
\end_layout

\begin_layout Standard
Dann gilt: 
\begin_inset Formula $V'=A_{2}\cup\left\{ W\right\} $
\end_inset

 und 
\begin_inset Formula $\left|V'\right|=n'=\left|A_{2}\right|+1$
\end_inset

.
 Die Höhe von 
\begin_inset Formula $T'$
\end_inset

 ist höchstens 
\begin_inset Formula $\sqrt{n}$
\end_inset

, da 
\begin_inset Formula $\forall m<i<M:\:\left|s_{i}\right|>\sqrt{n}$
\end_inset


\end_layout

\begin_layout Standard
Nach 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{planar-wichtig}
\end_layout

\end_inset

 lässt sich in 
\begin_inset Formula $G'$
\end_inset

 in 
\begin_inset Formula $\O n$
\end_inset

 eine Partitionierung 
\begin_inset Formula $S',V_{1}',V_{2}'$
\end_inset

 finden, sodass
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left|V_{1}'\right|,\left|V_{2}'\right|\leq\frac{2}{3}n'$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $S'$
\end_inset

 ist Separator der 
\begin_inset Formula $V_{1}'$
\end_inset

 und 
\begin_inset Formula $V_{2}'$
\end_inset

 trennt
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left|S'\right|\leq2\cdot h\left(T'\right)\leq2\sqrt{n}$
\end_inset


\end_layout

\begin_layout Standard
Setze 
\begin_inset Formula $S\coloneqq\left(S'\cup S_{m}\cup S_{M}\right)\backslash\left\{ W\right\} $
\end_inset

.
 Dann gilt:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left|S\right|\leq4\cdot\sqrt{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 ist Separator, der 
\begin_inset Formula $A_{1},V_{1}',V_{2}',A_{3}$
\end_inset

 trennt
\end_layout

\begin_layout Standard
Wähle als 
\begin_inset Formula $V_{1}$
\end_inset

 die größere Menge von 
\begin_inset Formula $V_{1}'\backslash W$
\end_inset

 und 
\begin_inset Formula $V_{2}'\backslash W$
\end_inset

 und den Rest von 
\begin_inset Formula $V$
\end_inset

 als 
\begin_inset Formula $V_{2}$
\end_inset

.
 Falls 
\begin_inset Formula $\left|V_{1}'\right|=\left|V_{2}'\right|$
\end_inset

, wähle als 
\begin_inset Formula $V_{1}$
\end_inset

 die Menge, die 
\begin_inset Formula $W$
\end_inset

 nicht enthält.
 Da 
\begin_inset Formula $\left|A_{2}\right|>\frac{2}{3}n$
\end_inset

 gilt: 
\begin_inset Formula 
\begin{align*}
\left|V_{1}\right| & \leq\frac{2}{3}n'\leq\frac{2}{3}n\\
\left|V_{2}\right| & \leq n-\left|V_{1}\right|\leq n-\frac{\left|A_{2}\right|}{2}\leq\frac{2}{3}n
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz {
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (-2,-5) -- (0,0) -- (2,-5);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-1.2) ellipse (1cm and .1cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-1.5, -1.2) {$S_m$};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-2.6) ellipse (2cm and .1cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-2.5, -2.65) {$S_
\backslash
mu$};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-4) ellipse (2.5cm and .1cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-2.8) circle (.6cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-3, -4) {$S_M$};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (4,-2) (A){$V_2$};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (4,-4) (B){$V_1$};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (0,-0.6) -- (A);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (0,-4.5) -- (A);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (0,-2.8) -- (A);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (.8,-3.4) -- (B);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz{
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[opacity=0] (0,-2.5) rectangle (0,2.5);
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (0,0) {oder};
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz {
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (-2,-5) -- (0,0) -- (2,-5);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-1.2) ellipse (1cm and .1cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-1.5, -1.2) {$S_m$};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-2.6) ellipse (2cm and .1cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-2.5, -2.65) {$S_
\backslash
mu$};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-4) ellipse (2.5cm and .1cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw (0,-2.8) circle (.6cm);
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (-3, -4) {$S_M$};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (4,-2) (A){$V_1$};
\end_layout

\begin_layout Plain Layout

	
\backslash
node at (4,-4) (B){$V_2$};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (0,-0.6) -- (A);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (0,-4.5) -- (A);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (0,-2.8) -- (A);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw [<-] (.8,-3.4) -- (B);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Situation in 4 (b)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Section
Anwendung des Planar Separator Theorems
\end_layout

\begin_layout Standard
Das Planar Separator Theorem (PST) wird oft in Algorithmen auf planaren
 Graphen verwendet.
 Ein generischer Divide-and-Conquer-Algorithmus unter Zuhilfenahme des PST
 sieht folgendermaßen aus:
\end_layout

\begin_layout Algorithm*
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Generischer Divide-and-Conquer-Algorithmus mit PST
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Zerlege 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 mittels PST in 
\begin_inset Formula $G_{1},G_{2}$
\end_inset

 und Separator 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Itemize
Wende den Algorithmus rekursiv auf 
\begin_inset Formula $G_{1}$
\end_inset

 und 
\begin_inset Formula $G_{2}$
\end_inset

 an, 
\begin_inset Formula $G_{1}=\left(V_{1},E_{1}\right),\left|V_{1}\right|=n_{1},G_{2}=\left(V_{2},E_{2}\right),\left|V_{2}\right|=n_{2}$
\end_inset

.
\end_layout

\begin_layout Itemize
Berechne aus den Lösungen zu 
\begin_inset Formula $G_{1}$
\end_inset

 und 
\begin_inset Formula $G_{2}$
\end_inset

 unter Berücksichtigung von 
\begin_inset Formula $S$
\end_inset

 eine Lösung zu 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
Rekursionsabschätzung der Laufzeit 
\begin_inset Formula $T\left(n\right)$
\end_inset

 eines solchen Algorithmus:
\begin_inset Formula 
\[
T\left(n\right)\le T\left(n_{1}\right)+T\left(n_{2}\right)+\sqrt{n}\cdot f\left(n\right)
\]

\end_inset

Dabei ist 
\begin_inset Formula $f\left(n\right)$
\end_inset

 die Laufzeit des eigentlichen Algorithmus, und 
\begin_inset Formula $n_{1},n_{2}\le\frac{2}{3}n$
\end_inset

, 
\begin_inset Formula $n_{1}+n_{2}\le n$
\end_inset

.
\end_layout

\begin_layout Subsection
Matching
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Matching
\end_layout

\end_inset

Zu 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 heißt 
\begin_inset Formula $M\subseteq E$
\end_inset

 
\noun on
Matching
\noun default
, falls keine zwei Kanten in 
\begin_inset Formula $M$
\end_inset

 den selben Endknoten haben.
 Ein Knoten 
\begin_inset Formula $v\in V$
\end_inset

 heißt
\begin_inset Index idx
status open

\begin_layout Plain Layout
gematcht
\end_layout

\end_inset

 
\noun on
ungematcht
\noun default
, falls 
\begin_inset Formula $v$
\end_inset

 zu keiner Kante aus 
\begin_inset Formula $M$
\end_inset

 inzident ist.
 Andernfalls heißt 
\begin_inset Formula $v$
\end_inset

 
\noun on
gematcht
\noun default
.
\end_layout

\begin_layout Problem
Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

, mit Kantengewichten 
\begin_inset Formula $w:\:E\rightarrow\mathbb{R}$
\end_inset

, wird das Matching mit maximalem Gewicht, also jenes Matching 
\begin_inset Formula $M$
\end_inset

 für das 
\begin_inset Formula $w\left(M\right)\coloneqq\sum_{l\in M}w\left(l\right)$
\end_inset

 unter allen Matchings in 
\begin_inset Formula $G$
\end_inset

 maximal ist, gesucht.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Weg!erhöhender
\end_layout

\end_inset

Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und Matching 
\begin_inset Formula $M\subseteq E$
\end_inset

, wird ein einfacher Weg (oder einfacher Kreis), dessen Kanten abwechselnd
 in 
\begin_inset Formula $M$
\end_inset

 und 
\begin_inset Formula $E\backslash M$
\end_inset

 liegen, 
\noun on
alternierender Weg
\noun default
 bezüglich 
\begin_inset Formula $M$
\end_inset

 genannt.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Weg!alternierender
\end_layout

\end_inset

Sei 
\begin_inset Formula $P$
\end_inset

 ein alternierender Weg bezüglich eines Matchings 
\begin_inset Formula $M$
\end_inset

, der entweder ein Kreis gerader Länge ist oder ein Weg ist, dessen erste
 und letzte Kante in 
\begin_inset Formula $M$
\end_inset

 liegt oder inzident zu einem ungematchten Knoten , ist.
 
\begin_inset Formula $P$
\end_inset

 heißt 
\noun on
erhöhend
\noun default
 bezüglich 
\begin_inset Formula $M$
\end_inset

, falls:
\begin_inset Formula 
\[
\sum_{l\text{ auf }P,l\in E\backslash M}w\left(l\right)>\sum_{l\text{ auf }P,l\in M}w\left(l\right)
\]

\end_inset


\end_layout

\begin_layout Remark*
Sei 
\begin_inset Formula $M$
\end_inset

 ein Matching in 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

.
 Sei 
\begin_inset Formula $P$
\end_inset

 ein erhöhender Weg bezüglich 
\begin_inset Formula $M$
\end_inset

.
 Dann ist 
\begin_inset Formula $M'\coloneqq\left(M\backslash P\right)\cup\left(P\backslash M\right)$
\end_inset

 ein Matching in 
\begin_inset Formula $G$
\end_inset

 mit 
\begin_inset Formula $w\left(M'\right)>w\left(M\right)$
\end_inset

.
\end_layout

\begin_layout Definition
Für zwei Mengen 
\begin_inset Formula $A$
\end_inset

 und 
\begin_inset Formula $B$
\end_inset

 sei die 
\noun on
geometrische differenz 
\begin_inset Formula $\Delta$
\end_inset


\noun default
 von 
\begin_inset Formula $A$
\end_inset

 und 
\begin_inset Formula $B$
\end_inset

 definiert als:
\begin_inset Formula 
\begin{align*}
A\Delta B & \coloneqq\left(A\cup B\right)\backslash\left(A\cap B\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Lemma
Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph mit Kantengewichten 
\begin_inset Formula $w:\:E=\mathbb{R}$
\end_inset

 und 
\begin_inset Formula $M$
\end_inset

 ein Matching in 
\begin_inset Formula $G$
\end_inset

.
 
\begin_inset Formula $w\left(M\right)$
\end_inset

 ist genau dann maximal, falls es in 
\begin_inset Formula $G$
\end_inset

 keinen erhöhenden Weg bezüglich 
\begin_inset Formula $M$
\end_inset

 gibt.
\end_layout

\begin_layout Proof
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Paragraph*
\begin_inset Quotes gld
\end_inset


\begin_inset Formula $\boldsymbol{\implies}$
\end_inset


\begin_inset Quotes grd
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
klar.
\end_layout

\begin_deeper
\begin_layout Paragraph*
\begin_inset Quotes gld
\end_inset


\begin_inset Formula $\boldsymbol{\impliedby}$
\end_inset


\begin_inset Quotes grd
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Angenommen 
\begin_inset Formula $M$
\end_inset

 sei ein nicht maximales Matching in 
\begin_inset Formula $G$
\end_inset

.
 Dann existiert ein Matching 
\begin_inset Formula $M^{*}$
\end_inset

 mit 
\begin_inset Formula $w\left(M^{*}\right)>w\left(M\right)$
\end_inset

.
 Sei 
\begin_inset Formula $G_{M\Delta M^{*}}$
\end_inset

 der Subgraph von 
\begin_inset Formula $G$
\end_inset

, der durch 
\begin_inset Formula $M\Delta M^{*}$
\end_inset

 induziert wird.
 
\begin_inset Formula $G_{M\Delta M^{*}}$
\end_inset

 besteht ausschließlich aus einfachen Kreisen und einfachen Wegen, da der
 Knotengrad jedes Knotens maximal 2 sein kann.
 Falls keiner der Kreise erhöhend bezüglich 
\begin_inset Formula $M$
\end_inset

 ist, existiert ein inklusionsmaximaler, bezüglich 
\begin_inset Formula $M$
\end_inset

 alternierender Weg 
\begin_inset Formula $P$
\end_inset

, für den 
\begin_inset Formula $w\left(P\cap M^{*}\right)>w\left(P\cap M\right)$
\end_inset

.
 Entweder gehören beide Endknoten von 
\begin_inset Formula $P$
\end_inset

 zu 
\begin_inset Formula $M$
\end_inset

 oder es gehört mindestens ein Endknoten zu 
\begin_inset Formula $M^{*}$
\end_inset

 und damit (da wir in 
\begin_inset Formula $G_{M\Delta M^{*}}$
\end_inset

 sind) nicht in 
\begin_inset Formula $M$
\end_inset

.
 In beiden Fällen ist 
\begin_inset Formula $P$
\end_inset

 bezüglich 
\begin_inset Formula $M$
\end_inset

 erhöhend.
\end_layout

\begin_layout Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{Matching mit v}
\end_layout

\end_inset

Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph mit Kantengewichten 
\begin_inset Formula $w:\:E\rightarrow\mathbb{R}$
\end_inset

 und 
\begin_inset Formula $v\in V$
\end_inset

 ein Knoten in 
\begin_inset Formula $G$
\end_inset

.
 Sei 
\begin_inset Formula $M$
\end_inset

 ein Matching maximalen Gewichts in 
\begin_inset Formula $G-v$
\end_inset

.
 Dann gilt:
\end_layout

\begin_deeper
\begin_layout Enumerate
Falls es in 
\begin_inset Formula $G$
\end_inset

 keinen erhöhenden Weg bezüglich 
\begin_inset Formula $M$
\end_inset

 mit Endknoten 
\begin_inset Formula $v$
\end_inset

 gibt, so ist 
\begin_inset Formula $M$
\end_inset

 auch maximales Matching in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Enumerate
Falls es in 
\begin_inset Formula $G$
\end_inset

 ein bezüglich 
\begin_inset Formula $M$
\end_inset

 erhöhenden Weg 
\begin_inset Formula $P$
\end_inset

 mit Endknoten 
\begin_inset Formula $v$
\end_inset

 gibt und 
\begin_inset Formula $w\left(P\cap E\backslash M\right)-w\left(P\cap M\right)$
\end_inset

 maximal unter allen solchen Wegen ist, dann ist 
\begin_inset Formula $M\Delta P$
\end_inset

 ein Matching maximalen Gewichts in 
\begin_inset Formula $G$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Proof
Sei 
\begin_inset Formula $M$
\end_inset

 ein Matching maximalen Gewichts in 
\begin_inset Formula $G-v$
\end_inset

.
 
\begin_inset Formula $M$
\end_inset

 ist auch ein Matching in 
\begin_inset Formula $G$
\end_inset

.
 Ein erhöhender Weg bezüglich 
\begin_inset Formula $M$
\end_inset

 muss 
\begin_inset Formula $v$
\end_inset

 als Endknoten enthalten.
 Sei 
\begin_inset Formula $M^{*}$
\end_inset

 ein maximales Matching in 
\begin_inset Formula $G$
\end_inset

.
 
\begin_inset Formula $M\Delta M^{*}$
\end_inset

 ist eine Menge von alternierenden einfachen Kreisen und Wegen bezüglich
 
\begin_inset Formula $M$
\end_inset

 und 
\begin_inset Formula $M^{*}$
\end_inset

.
 Ein erhöhender Weg bezüglich 
\begin_inset Formula $M$
\end_inset

 in 
\begin_inset Formula $G_{M\Delta M^{*}}$
\end_inset

 ist auch ein erhöhender Weg bezüglich 
\begin_inset Formula $M$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
 
\begin_inset Formula $G_{M\Delta M^{*}}$
\end_inset

 kann höchstens einen erhöhenden Weg 
\begin_inset Formula $P^{*}$
\end_inset

 bezüglich 
\begin_inset Formula $M$
\end_inset

 mit Endknoten 
\begin_inset Formula $v$
\end_inset

 enthalten, da 
\begin_inset Formula $v$
\end_inset

 in 
\begin_inset Formula $M^{*}$
\end_inset

 sonst zwei inzidente Kanten hätte.
 Nun gilt 
\begin_inset Formula $w\left(M\right)-w\left(P^{*}\cap M\right)=w\left(M^{*}\right)-w\left(P^{*}\cap M^{*}\right)$
\end_inset

.
 Das Gewicht des Matching 
\begin_inset Formula $M'$
\end_inset

, das durch erhöhenden Weg 
\begin_inset Formula $P^{*}$
\end_inset

 induziert wird, ist 
\begin_inset Formula $w\left(M'\right)=w\left(M\right)-w\left(P^{*}\cap M\right)+w\left(P^{*}\cap E\backslash M\right)=w\left(M\right)-w\left(P^{*}\cap M\right)+w\left(P^{*}\cap M^{*}\right)=w\left(M^{*}\right)$
\end_inset

.
\end_layout

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Divide-and-Conquer-Algorithmus für Matching in planaren Graphen mit PST
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{dac Matching}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Falls 
\begin_inset Formula $G$
\end_inset

 höchstens 5 Knoten enthält bestimme das maximale Matching direkt.
\end_layout

\begin_layout Enumerate
Ansonsten zerlege 
\begin_inset Formula $G$
\end_inset

 mit dem Planar Separator Theorem in 
\begin_inset Formula $G_{1},G_{2}$
\end_inset

 und Separator 
\begin_inset Formula $S$
\end_inset

.
 Wende diesen Algorithmus rekursiv auf 
\begin_inset Formula $G_{1}$
\end_inset

 und 
\begin_inset Formula $G_{2}$
\end_inset

 an, die entsprechenden maximalen Matchings seien 
\begin_inset Formula $M_{1}$
\end_inset

 und 
\begin_inset Formula $M_{2}$
\end_inset

.
 
\begin_inset Formula $V'\coloneqq V\backslash S$
\end_inset

.
\end_layout

\begin_layout Enumerate
Solange bis 
\begin_inset Formula $S\neq\emptyset$
\end_inset

: wähle 
\begin_inset Formula $v\in S$
\end_inset

, setze 
\begin_inset Formula $S\gets S\backslash\left\{ v\right\} $
\end_inset

 und 
\begin_inset Formula $V'\gets V'\cup\left\{ v\right\} $
\end_inset

.
 Wende 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{Matching mit v}
\end_layout

\end_inset

 an.
\end_layout

\end_deeper
\begin_layout Standard
Die Laufzeit 
\begin_inset Formula $T\left(n\right)$
\end_inset

 von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{dac Matching}
\end_layout

\end_inset

 berechnet sich als:
\begin_inset Formula 
\begin{align*}
T\left(n_{0}\right) & =c_{0}\\
T\left(n\right) & \le T\left(c_{1}\cdot n\right)+T\left(c_{2}\cdot n\right)+c_{3}\sqrt{n}\cdot f\left(n\right)
\end{align*}

\end_inset

mit 
\begin_inset Formula $c_{1},c_{2}<\frac{2}{3}$
\end_inset

, 
\begin_inset Formula $c_{1}+c_{2}<1$
\end_inset

 und 
\begin_inset Formula $f\left(n\right)$
\end_inset

 die Laufzeit für das Erweitern der Matchings nach 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{Matching mit v}
\end_layout

\end_inset

.
 Per Induktion kann gezeigt werden, dass falls
\begin_inset Formula 
\begin{align*}
f\left(n\right)\in\Theta\left(n\right) & \implies T\left(n\right)\in\O{n^{\frac{3}{2}}}\\
f\left(n\right)\in\Theta\left(n\log n\right) & \implies T\left(n\right)\in\O{n^{\frac{3}{2}}\log n}
\end{align*}

\end_inset

Falls 
\begin_inset Formula $G$
\end_inset

 gewichtet ist, ist 
\begin_inset Formula $f\left(n\right)\in\Theta\left(n\log n\right)$
\end_inset

, in einem ungewichtetetn Graphen ist 
\begin_inset Formula $f\left(n\right)\in\Theta\left(n\right)$
\end_inset


\end_layout

\begin_layout Subsection
Mixed Max Cut
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Schnitt!Gewicht
\end_layout

\end_inset

Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph mit Kantengewichten 
\begin_inset Formula $w:\:E\rightarrow\mathbb{R}$
\end_inset

 und 
\begin_inset Formula $S\subseteq E$
\end_inset

 ein Schnitt in 
\begin_inset Formula $G$
\end_inset

.
 Dann heißt 
\begin_inset Formula $\sum_{l\in S}w\left(l\right)\eqqcolon w\left(S\right)$
\end_inset

 
\noun on
Gewicht
\noun default
 von 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Min Cut
\end_layout

\end_inset

 Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph mit Kantengewichtsfunktion 
\begin_inset Formula $w:E\rightarrow\mathbb{R}^{+}$
\end_inset

.
 Gesucht wird der Schnitt 
\begin_inset Formula $S$
\end_inset

 (
\begin_inset Formula $S\neq\emptyset)$
\end_inset

 mit minimalem Gewicht 
\begin_inset Formula $w\left(S\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Das Min-Cut-Problem ist auf einem beliebigen Graphen in 
\begin_inset Formula $\O{n\cdot m+n^{2}\cdot\log n}$
\end_inset

 lösbar.
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Max Cut
\end_layout

\end_inset

 Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph mit Kantengewichtsfunktion 
\begin_inset Formula $w:E\rightarrow\mathbb{R}^{+}$
\end_inset

.
 Gesucht wird der Schnitt 
\begin_inset Formula $S$
\end_inset

 (
\begin_inset Formula $E\neq S\neq\emptyset)$
\end_inset

 mit maximalem Gewicht 
\begin_inset Formula $w\left(S\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Das Max-Cut-Problem ist auf einem beliebigen Graphen 
\begin_inset Formula $\mathcal{NP}$
\end_inset

-schwer.
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Mixed Max Cut
\end_layout

\end_inset

 Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph mit Kantengewichtsfunktion 
\begin_inset Formula $w:E\rightarrow\mathbb{R}$
\end_inset

.
 Gesucht wird der Schnitt 
\begin_inset Formula $S$
\end_inset

 (
\begin_inset Formula $E\neq S\neq\emptyset)$
\end_inset

 mit maximalem Gewicht 
\begin_inset Formula $w\left(S\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Das Min-Cut-Problem ist äquivalent zum Mixed-Max-Cut-Problem bei dem 
\begin_inset Formula $w\left(l\right)$
\end_inset

 durch 
\begin_inset Formula $-w\left(l\right)$
\end_inset

 ersetzt wird.
 Da Max-Cut ein Spezialfall von Mixed-Max-Cut ist, ist Mixed-Max-Cut natürlich
 ebenfalls 
\begin_inset Formula $\NP$
\end_inset

-schwer.
 Auf planaren Graphen existiert ein Algorithmus für Mixed-Max-Cut in planaren
 Graphen mit Laufzeit 
\begin_inset Formula $\O{n^{\frac{3}{2}}\log n}$
\end_inset

.
\end_layout

\begin_layout Standard
Der Algorithmus auf planaren Graphen nutzt die Dualität zwischen einem Schnitt
 in einem planaren Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und einer Menge von Kreisen in seinem Dualgraph 
\begin_inset Formula $G^{*}=\left(V^{*},E^{*}\right)$
\end_inset

 (siehe 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{schnitt-kreis-dual}
\end_layout

\end_inset

).
 Das Mixed-Max-Cut-Problem in 
\begin_inset Formula $G$
\end_inset

 ist äquivalent zum Mixed-Max-Kreis-Problem in 
\begin_inset Formula $G^{*}$
\end_inset

 mit 
\begin_inset Formula $w:E^{*}\rightarrow\mathbb{R};\:w\left(e^{*}\right)=w\left(e\right)$
\end_inset

 wobei 
\begin_inset Formula $e^{*}$
\end_inset

 die Dualkante zu 
\begin_inset Formula $e\in E$
\end_inset

 ist.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Menge!gerade
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
eulersch
\end_layout

\end_inset

Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph.
 Eine Kantenmenge 
\begin_inset Formula $E'\subseteq E$
\end_inset

 heißt 
\noun on
gerade
\noun default
, gwd.
 im durch sie induzierten Subgraph von 
\begin_inset Formula $G$
\end_inset

 alle Knoten geraden Grad haben.
\end_layout

\begin_layout Definition
Ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 heißt 
\noun on
eulersch
\noun default
, gdw.
 jede Zusammenhangskomponente von 
\begin_inset Formula $G$
\end_inset

 einen Euler-Kreis enthält.
 Ein Euler-Kreis ist ein Kreis, der jede Kante genau einmal enthält.
\end_layout

\begin_layout Remark*
Für einen beliebigen Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 gilt:
\end_layout

\begin_layout Standard
\noindent
\begin_inset space \hspace{}
\length 2.5em
\end_inset


\begin_inset Formula $G$
\end_inset

 ist eulersch
\begin_inset Newline newline
\end_inset

 
\begin_inset Formula $\iff$
\end_inset

 
\begin_inset Formula $E$
\end_inset

 ist eine gerade Menge
\begin_inset Newline newline
\end_inset

 
\begin_inset Formula $\iff$
\end_inset

 
\begin_inset Formula $G$
\end_inset

 besteht aus einer kantendisjunkten Vereinigung von einfachen Kreisen.
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Mixed Max Kreis
\end_layout

\end_inset

 Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 mit Kantengewichten 
\begin_inset Formula $w:E\rightarrow\mathbb{R}$
\end_inset

, wird eine nichtleere, gerade Menge 
\begin_inset Formula $E'\subseteq E$
\end_inset

 mit maximalem 
\begin_inset Formula $w\left(E'\right)$
\end_inset

 gesucht.
 
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Matching!perfektes
\end_layout

\end_inset

Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 gerade.
 Ein Matching 
\begin_inset Formula $M$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

 mit 
\begin_inset Formula $\left|M\right|=\frac{\left|V\right|}{2}$
\end_inset

 heißt 
\noun on
perfekt
\noun default
.
\end_layout

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Mixed-Max-Cut auf planaren Graphen
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{mixed-max-cut}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Trianguliere 
\begin_inset Formula $G$
\end_inset

.
 (
\begin_inset Formula $\O n$
\end_inset

)
\end_layout

\begin_layout Enumerate
Berechne den Dualgraph 
\begin_inset Formula $G^{*}$
\end_inset

 zu 
\begin_inset Formula $G$
\end_inset

 und eine beliebige planare Einbettung.
 Definiere 
\begin_inset Formula $w:E^{*}\rightarrow\mathbb{R}$
\end_inset

 durch 
\begin_inset Formula $w\left(e^{*}\right)\coloneqq w\left(e\right).$
\end_inset

 (
\begin_inset Formula $\O n$
\end_inset

)
\end_layout

\begin_layout Enumerate
Konstruiere aus 
\begin_inset Formula $G^{*}$
\end_inset

 einen Graphen 
\begin_inset Formula $G'$
\end_inset

 sodass ein perfektes Matching minimalen Gewichts in 
\begin_inset Formula $G'$
\end_inset

 eine gerade Menge 
\begin_inset Formula $M^{*}$
\end_inset

 maximalen Gewichts in 
\begin_inset Formula $G^{*}$
\end_inset

 induziert.
 (
\begin_inset Formula $\O n$
\end_inset

)
\end_layout

\begin_layout Enumerate
Berechne ein perfektes Matching 
\begin_inset Formula $M$
\end_inset

 minimalen Gewichts in 
\begin_inset Formula $G'$
\end_inset

 und die induzierte gerade Menge 
\begin_inset Formula $M^{*}$
\end_inset

 in 
\begin_inset Formula $G^{*}$
\end_inset

.
 (
\begin_inset Formula $\O{n^{\frac{3}{2}}\log n}$
\end_inset

)
\end_layout

\begin_layout Enumerate
Sonderfall: Falls 
\begin_inset Formula $M$
\end_inset

 eine leere Menge 
\begin_inset Formula $M^{*}$
\end_inset

 induziert, berechne aus 
\begin_inset Formula $M$
\end_inset

 eine nichttriviale gerade Menge in 
\begin_inset Formula $G^{*}$
\end_inset

 mit maximalem Gewicht.
\end_layout

\end_deeper
\begin_layout Paragraph
Zu Schritt 1 und 2
\end_layout

\begin_layout Standard
Wenn 
\begin_inset Formula $G$
\end_inset

 trianguliert wird, erhält jede eingefügte Kante das Gewicht 
\begin_inset Formula $0$
\end_inset

.
 Deshalb ändert sich durch das Triangulieren das Ergebnis nicht.
 Da 
\begin_inset Formula $G$
\end_inset

 trianguliert ist, haben alle Knoten in 
\begin_inset Formula $G^{*}$
\end_inset

 Grad 3, d.h.
 
\begin_inset Formula $G^{*}$
\end_inset

 ist 3-regulär.
 Jede gerade Menge in 
\begin_inset Formula $G^{*}$
\end_inset

 ist somit sogar eine Menge von knotendisjunkten Kreisen.
\end_layout

\begin_layout Paragraph
Zu Schritt 3
\end_layout

\begin_layout Standard
\begin_inset Formula $G^{*}$
\end_inset

 ist 3-regulär.
 In 
\begin_inset Formula $G^{*}$
\end_inset

 kann somit jeder Knoten 
\begin_inset Formula $v^{*}$
\end_inset

 durch ein Dreieck 
\begin_inset Formula $\Delta_{v^{*}}$
\end_inset

 ersetzt werden.
 Sei 
\begin_inset Formula $G'$
\end_inset

 der resultierende Graph.
 In 
\begin_inset Formula $G'$
\end_inset

 kann nun ein perfektes Matching berechnet werden.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align right
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[L=v^*]{v}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[rotate=90]
\end_layout

\begin_layout Plain Layout


\backslash
Vertices[unit=2,NoLabel]{circle}{a,b,c}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[label=$w_1$](v)(a)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[label=$w_2$](v)(b)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[label=$w_3$](v)(c)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "15col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula $\rightsquigarrow$
\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[rotate=90]
\end_layout

\begin_layout Plain Layout


\backslash
Vertices[unit=3,NoLabel]{circle}{a,b,c}
\end_layout

\begin_layout Plain Layout


\backslash
Vertices[unit=1,NoLabel]{circle}{aa,bb,cc}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[label=$w_1$](a)(aa)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[label=$w_2$](b)(bb)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[label=$w_3$](c)(cc)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[label=0](aa,bb,cc,aa) 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ersetzung in Schritt 3 von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{mixed-max-cut}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Remark*
\begin_inset Formula $G'$
\end_inset

 hat eine gerade Anzahl an Knoten, weil 
\begin_inset Formula $G^{*}$
\end_inset

 3-regulär ist und damit 
\begin_inset Formula $2m=3n$
\end_inset

 gilt, da jede Kante 2 Facetten voneinander abgrenzt und in einem 3-regulären
 Graphen jede Facette von 3 Kanten begrenzt wird.
\end_layout

\begin_layout Lemma*
\begin_inset space ~
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Ist 
\begin_inset Formula $M$
\end_inset

 ein perfektes Matching in 
\begin_inset Formula $G'$
\end_inset

, so induziert 
\begin_inset Formula $E'\backslash M$
\end_inset

 eine gerade Menge in 
\begin_inset Formula $G^{*}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Ist 
\begin_inset Formula $E_{0}^{*}$
\end_inset

 eine gerade Menge in 
\begin_inset Formula $G^{*}$
\end_inset

, so induziert 
\begin_inset Formula $M^{*}=E^{*}\backslash E_{0}^{*}$
\end_inset

 ein perfektes Matching in 
\begin_inset Formula $G'$
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Sei 
\begin_inset Formula $M$
\end_inset

 ein perfektes Matching in 
\begin_inset Formula $G'$
\end_inset

.
 Dann hat jeder Knoten in 
\begin_inset Formula $G'$
\end_inset

 eine inzidente Kante in 
\begin_inset Formula $M$
\end_inset

.
 Für jeden Knoten 
\begin_inset Formula $v^{*}\in V^{*}$
\end_inset

 und sein korrespondierendes Dreieck 
\begin_inset Formula $\Delta_{v^{*}}$
\end_inset

 in 
\begin_inset Formula $G'$
\end_inset

 gibt es hierfür aber nur zwei Möglichkeiten: Entweder liegt 
\emph on
keine
\emph default
 Kante von 
\begin_inset Formula $\Delta_{v^{*}}$
\end_inset

 in 
\begin_inset Formula $M$
\end_inset

 oder 
\emph on
nur eine
\emph default
.
 Im ersten Fall sind alle zu 
\begin_inset Formula $v^{*}$
\end_inset

 inzidenten Kanten in 
\begin_inset Formula $M$
\end_inset

, in letzterem eine.
 In beiden Fällen liegen eine gerade Anzahl an zu 
\begin_inset Formula $v^{*}$
\end_inset

 inzidenten Kanten in 
\begin_inset Formula $E^{*}\backslash M$
\end_inset

: Entweder 0 oder 2.
\end_layout

\begin_layout Proof
Ist wiederum 
\begin_inset Formula $E_{0}^{*}\neq\emptyset$
\end_inset

 eine gerade Menge in 
\begin_inset Formula $G^{*}$
\end_inset

, so sind zu jedem 
\begin_inset Formula $v^{*}\in V^{*}$
\end_inset

 zwei oder keine inzidenten Kanten in 
\begin_inset Formula $E_{0}^{*}$
\end_inset

.
 Somit sind eine oder drei zu 
\begin_inset Formula $v^{*}$
\end_inset

 inzidenten Kanten in 
\begin_inset Formula $M^{*}=E^{*}\backslash E_{0}^{*}$
\end_inset

.
 
\begin_inset Formula $M^{*}$
\end_inset

 kann zu 
\begin_inset Formula $M$
\end_inset

 erweitert werden, indem im ersten Fall die Kante, die die beiden ungematchten
 Knoten in 
\begin_inset Formula $\Delta_{v^{*}}$
\end_inset

 verbindet, im zweiten Fall keine Kante hinzugefügt wird.
 Dann hat jedes 
\begin_inset Formula $v'\in V'$
\end_inset

 genau eine inzidente Kante in 
\begin_inset Formula $M$
\end_inset

.
 
\begin_inset Formula $M$
\end_inset

 ist somit ein perfektes Matching in 
\begin_inset Formula $G'$
\end_inset

.
\end_layout

\begin_layout Paragraph
Zu Schritt 4
\end_layout

\begin_layout Remark*
Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph mit Kantengewichtsfunktion 
\begin_inset Formula $w:E\rightarrow\mathbb{R}$
\end_inset

.
 
\begin_inset Formula $M\subseteq E$
\end_inset

 ist genau dann ein perfektes Matching minimalen Gewichts in 
\begin_inset Formula $G$
\end_inset

, falls 
\begin_inset Formula $M$
\end_inset

 ein perfektes Matching maximalen Gewichts in 
\begin_inset Formula $G$
\end_inset

 bezüglich 
\begin_inset Formula $\bar{w}:E\rightarrow\mathbb{R}$
\end_inset

 mit 
\begin_inset Formula $\bar{w}\left(e\right)=W-w\left(e\right)$
\end_inset

 ist.
 
\begin_inset Formula $W\in\mathbb{R}$
\end_inset

 sei hierbei eine geeignete Konstante.
\end_layout

\begin_layout Standard
Die Forderung, dass das Matching minimalen Gewichts, das in 
\begin_inset Formula $G'$
\end_inset

 berechnet wird, perfekt ist, kann durch die Kantengewichtsfunktion kodiert
 werden.
 Sei hierzu 
\begin_inset Formula $w_{max}\coloneqq\max_{e\in E'}w\left(e\right)$
\end_inset

, 
\begin_inset Formula $w_{min}\coloneqq\min_{l\in E'}w\left(l\right)$
\end_inset

.
 Für ein perfektes Matching 
\begin_inset Formula $M$
\end_inset

 in 
\begin_inset Formula $G'$
\end_inset

 gilt:
\begin_inset Formula 
\[
\bar{w}\left(M\right)=\sum_{e\in M}\bar{w}\left(e\right)=\frac{n}{2}\cdot W-\sum_{e\in M}w\left(e\right)\geq\frac{n}{2}\left(W-w_{max}\right)
\]

\end_inset

Für ein nicht perfektes Matching 
\begin_inset Formula $M'$
\end_inset

 in 
\begin_inset Formula $G'$
\end_inset

 gilt:
\begin_inset Formula 
\[
\bar{w}\left(M'\right)\leq\left(\frac{n}{2}-1\right)\cdot\left(W-w_{min}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Wähle also 
\begin_inset Formula $W$
\end_inset

 so, dass 
\begin_inset Formula $\frac{n}{2}\left(W-w_{max}\right)>\left(\frac{n}{2}-1\right)\left(W-w_{min}\right)$
\end_inset

, also 
\begin_inset Formula $W>\frac{n}{2}\left(w_{max}-w_{min}\right)+w_{min}$
\end_inset

.
 Dann gilt für ein perfektes Matching maximalen Gewichts 
\begin_inset Formula $M,$
\end_inset

 dass 
\begin_inset Formula $\bar{w}\left(M\right)>\bar{w}\left(M'\right)$
\end_inset

 für jedes nicht perfekte Matching 
\begin_inset Formula $M'$
\end_inset

.
\end_layout

\begin_layout Paragraph
Zu Schritt 5
\end_layout

\begin_layout Standard
Induziert das perfekte Matching 
\begin_inset Formula $M^{*}$
\end_inset

 minimalen Gewichts in 
\begin_inset Formula $G'$
\end_inset

 eine leere Menge an Kreisen in 
\begin_inset Formula $G^{*}$
\end_inset

, so gibt es keinen positiven Kreis in 
\begin_inset Formula $G^{*}$
\end_inset

.
 Nun berechnen wir in 
\begin_inset Formula $\O{n^{\frac{3}{2}}n\log n}$
\end_inset

 in 
\begin_inset Formula $G^{*}$
\end_inset

 einen einfachen negativen Kreis maximalen Gewichts unter Verwendung des
 Planar Separator Theorems.
\end_layout

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Negativer Kreis maximalen Gewichts
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Berechne entsprechend des Planar Separator Theorems eine Partitionierung
 
\begin_inset Formula $V_{1},V_{2},S$
\end_inset

 von 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Enumerate
Falls 
\begin_inset Formula $G$
\end_inset

 nur einen Kreis enthält, gebe diesen aus.
 Berechne ansonsten rekursiv negative Kreise maximalen Gewichts in den von
 
\begin_inset Formula $V_{1}$
\end_inset

 und 
\begin_inset Formula $V_{2}$
\end_inset

 induzierten Subgraphen 
\begin_inset Formula $G_{1}$
\end_inset

 und 
\begin_inset Formula $G_{2}$
\end_inset

 von 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Enumerate
Gib den Kreis maximalen Gewichts unter allen konstruierten Kreisen aus.
\end_layout

\end_deeper
\begin_layout Subparagraph
Schritt 2:
\end_layout

\begin_layout Standard
Die Graphen 
\begin_inset Formula $G_{1}$
\end_inset

 und 
\begin_inset Formula $G_{2}$
\end_inset

 sind nicht notwendigerweise 3-regulär.
 Die 3-Regularität kann jedoch durch rekursives Entfernen von Knoten mit
 Grad 1 und Kontrahieren von Knoten mit Grad 2 (unter Addition der Kantengewicht
e) hergestellt werden.
 Dies beeinflusst nicht das Gewicht des schwersten Kreises.
\end_layout

\begin_layout Chapter
Das Menger-Problem
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Zusammenhang!-Knoten
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Zusammenhang!-Kanten
\end_layout

\end_inset

Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

,
\begin_inset Formula 
\[
\mathcal{K}_{G}\left(u,v\right)\coloneqq\begin{cases}
\min_{S\subset V;\:S\text{ trennt }u\text{ und }v}\left|S\right| & \text{falls }\left\{ u,v\right\} \notin E\\
\left|V\right|-1 & \text{sonst}
\end{cases}
\]

\end_inset

wird als 
\noun on
Knotenzusammenhang
\noun default
 der Knoten 
\begin_inset Formula $u,v\in V$
\end_inset

 bezeichnet.
 Dies induziert den Knotenzusammenhang 
\begin_inset Formula $\mathcal{K}\left(G\right)$
\end_inset

 des Graphen 
\begin_inset Formula $G$
\end_inset

:
\begin_inset Formula 
\[
\mathcal{K}\left(G\right)\coloneqq\min_{u,v\in V}\mathcal{K}_{G}\left(u,v\right)=\min_{S\subseteq V\text{ Separator}}\left\{ \left|S\right|,\left|V\right|-1\right\} 
\]

\end_inset


\end_layout

\begin_layout Definition
Analog wird
\end_layout

\begin_layout Definition
\begin_inset Formula 
\[
\lambda_{G}\left(u,v\right)\coloneqq\min_{S\subseteq E;\:S\text{ trennt }u\text{ und }v}\left|S\right|
\]

\end_inset

 als 
\noun on
Kantenzusammenhang
\noun default
 der Knoten 
\begin_inset Formula $u,v\in V$
\end_inset

 bezeichnet.
 Dies induziert ebenfalls den Kantenzusammenhang 
\begin_inset Formula $\lambda\left(G\right)$
\end_inset

 des Graphen 
\begin_inset Formula $G$
\end_inset

:
\begin_inset Formula 
\[
\lambda\left(G\right)\coloneqq\min_{u,v\in V}\lambda_{G}\left(u,v\right)=\min_{S\subset E\text{ Schnitt}}\left|S\right|
\]

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Formula $G$
\end_inset

 heißt 
\noun on

\begin_inset Formula $k$
\end_inset

-fach Knoten-
\noun default
 beziehungsweise 
\noun on
Kantenzusammenhang
\noun default
 wenn 
\begin_inset Formula $k\leq\mathcal{K}\left(G\right)$
\end_inset

 beziehungsweise 
\begin_inset Formula $k\leq\lambda\left(G\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
kontendisjunkt
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
kantendisjunkt
\end_layout

\end_inset

Zwei Wege in einem Graphen 
\begin_inset Formula $G$
\end_inset

 heißen 
\noun on
knotendisjunkt
\noun default
, falls sie außer den Endknoten keinen gemeinsamen Knoten enthalten und
 
\noun on
kantendisjunkt
\noun default
, falls sie keine gemeinsame Kante enthalten.
 
\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Satz von Menger
\end_layout

\end_inset

 Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph und 
\begin_inset Formula $s,t\in V$
\end_inset

 Knoten in 
\begin_inset Formula $G$
\end_inset

 im knotendisjunkten Fall sei zusätzlich 
\begin_inset Formula $\left\{ s,t\right\} \notin E$
\end_inset

.
 Dann gilt:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\mathcal{K}_{G}\left(s,t\right)\geq k\iff$
\end_inset

 es existieren 
\begin_inset Formula $k$
\end_inset

 knotendisjunkte Wege zwischen 
\begin_inset Formula $s$
\end_inset

 und 
\begin_inset Formula $t$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\lambda_{G}\left(s,t\right)\geq k\iff$
\end_inset

 es existieren 
\begin_inset Formula $k$
\end_inset

 paarweise kantendisjunkte Wege zwischen 
\begin_inset Formula $s$
\end_inset

 und 
\begin_inset Formula $t$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
Folklore.
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Menger-Problem
\end_layout

\end_inset

 Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph.
 Finde die maximale Anzahl von konten- beziehungsweise kantendisjunkten
 Wegen zwischen zwei Knoten 
\begin_inset Formula $s,t\in V$
\end_inset

 von 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Section
Kantendisjunktes Menger-Problem
\end_layout

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Linearzeitalgorithmus für das kantendisjunkte Menger-Problem auf planaren
 Graphen
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{algo-menger}
\end_layout

\end_inset

 Der Algorithmus basiert auf Right-First-DFS.
 
\end_layout

\begin_layout Algorithm
Spezialfall: 
\begin_inset Formula $s$
\end_inset

 und 
\begin_inset Formula $t$
\end_inset

 liegen beide auf der äußeren Facette.
 Hier können die Wege direkt mit Right-First-DFS bestimmt werden.
\end_layout

\begin_layout Algorithm
Im Allgemeinen: Sei 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 ein Graph und 
\begin_inset Formula $s,t\in V$
\end_inset

 zwei Knoten aus 
\begin_inset Formula $G$
\end_inset

.
 Bette 
\begin_inset Formula $G$
\end_inset

 so planar ein, dass 
\begin_inset Formula $t$
\end_inset

 auf der äußeren Facette liegt.
\end_layout

\begin_deeper
\begin_layout Enumerate
Ersetze 
\begin_inset Formula $G$
\end_inset

 durch gerichteten Graphen 
\begin_inset Formula $\vec{G}=\left(V,\vec{E}\right)$
\end_inset

, bei dem 
\begin_inset Formula $\left\{ u,v\right\} \in E$
\end_inset

 durch 
\begin_inset Formula $\left\{ \left(u,v\right),\left(v,u\right)\right\} \subseteq\vec{E}$
\end_inset

 ersetzt wird.
 (
\begin_inset Formula $\O n$
\end_inset

)
\end_layout

\begin_layout Enumerate
Berechne in 
\begin_inset Formula $\vec{G}$
\end_inset

 geeignete kantendisjunkte Kreise 
\begin_inset Formula $\vec{C}_{1},\dots,\vec{C}_{l}$
\end_inset

 und den Graphen 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 der aus 
\begin_inset Formula $\vec{G}$
\end_inset

 entsteht, indem alle Kanten, die auf einem 
\begin_inset Formula $\vec{C}_{i}$
\end_inset

, 
\begin_inset Formula $1\leq i\leq l$
\end_inset

 liegen, 
\begin_inset Quotes gld
\end_inset

umgedreht
\begin_inset Quotes grd
\end_inset

 werden.
 (
\begin_inset Formula $\O n$
\end_inset

)
\end_layout

\begin_layout Enumerate
Führe eine Right-First-DFS auf 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 aus um die maximale Anzahl kantendisjunkter Wege zwischen 
\begin_inset Formula $s$
\end_inset

 und 
\begin_inset Formula $t$
\end_inset

 zu berechnen.
 (
\begin_inset Formula $\O n$
\end_inset

)
\end_layout

\begin_layout Enumerate
Berechne aus den 
\begin_inset Formula $k$
\end_inset

 gerichteten kantendisjunkten Wegen in 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 
\begin_inset Formula $k$
\end_inset

 kantendisjunkte Wege in 
\begin_inset Formula $G$
\end_inset

.
 (
\begin_inset Formula $\O n$
\end_inset

)
\end_layout

\end_deeper
\begin_layout Paragraph
Zu Schritt 1
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align right
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{a}
\end_layout

\begin_layout Plain Layout


\backslash
NOEA(a){b}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(a){c}
\end_layout

\begin_layout Plain Layout


\backslash
NOEA(b){d}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(d){e}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(b){f}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(f){g}
\end_layout

\begin_layout Plain Layout


\backslash
NOEA(g){h}
\end_layout

\begin_layout Plain Layout


\backslash
Edges(a,b,d,e,b,f,h,g,f,c,a)
\end_layout

\begin_layout Plain Layout


\backslash
Edge(c)(g)
\end_layout

\begin_layout Plain Layout


\backslash
Edges(f,e,h)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "10col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula $\rightsquigarrow$
\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
v{12}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{a}
\end_layout

\begin_layout Plain Layout


\backslash
NOEA(a){b}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(a){c}
\end_layout

\begin_layout Plain Layout


\backslash
NOEA(b){d}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(d){e}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(b){f}
\end_layout

\begin_layout Plain Layout


\backslash
SOEA(f){g}
\end_layout

\begin_layout Plain Layout


\backslash
NOEA(g){h}
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend left=
\backslash
v}](a,b,d,e,b,f,h,g,f,c,a)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={<-,bend right=
\backslash
v}](a,b,d,e,b,f,h,g,f,c,a)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left=
\backslash
v}](c)(g)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={<-,bend right=
\backslash
v}](c)(g)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend left=
\backslash
v}](f,e,h)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={<-,bend right=
\backslash
v}](f,e,h)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Der Übergang von 
\begin_inset Formula $G$
\end_inset

 zu 
\begin_inset Formula $G'$
\end_inset

 im ersten Schritt von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{algo-menger}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Lemma
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{menger-lemma-p}
\end_layout

\end_inset

Seien 
\begin_inset Formula $\vec{p}_{1},\dots,\vec{p_{r}}$
\end_inset

 kantendisjunkte, gerichtete 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{G}$
\end_inset

.
 Dann enthält 
\begin_inset Formula 
\begin{align*}
P\coloneqq\left\{ \left\{ u,v\right\} \in E\mid\right. & \text{genau eine der beiden gerichteten Kanten }\left(u,v\right)\text{ und }\left(v,u\right)\\
 & \left.\text{ gehören zu einem der Wege \ensuremath{p_{i}}}\right\} 
\end{align*}

\end_inset

 
\begin_inset Formula $r$
\end_inset

 kantendisjunkte 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Proof
Betrachte 
\begin_inset Formula $\left\{ u,v\right\} \in E$
\end_inset

 mit 
\begin_inset Formula $\left(u,v\right),\left(v,u\right)$
\end_inset

 belegt durch 
\begin_inset Formula $p_{1},\dots,p_{r}$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Case
\begin_inset Formula $\left(u,v\right)$
\end_inset

 und 
\begin_inset Formula $\left(v,u\right)$
\end_inset

 sind durch den selben Kreis 
\begin_inset Formula $p_{i}$
\end_inset

 belegt.
 Dann bildet der Teil zwischen den beiden Kanten einen Kreis, der in 
\begin_inset Formula $G$
\end_inset

 weg gelassen werden kann.
\end_layout

\begin_layout Case
\begin_inset Formula $\left(u,v\right)$
\end_inset

 ist durch 
\begin_inset Formula $p_{i}$
\end_inset

 und 
\begin_inset Formula $\left(v,u\right)$
\end_inset

 durch 
\begin_inset Formula $p_{j}$
\end_inset

, 
\begin_inset Formula $i\neq j$
\end_inset

 belegt.
 Dann können im gerichteten Graphen zwei Wege 
\begin_inset Formula $p_{a}$
\end_inset

 und 
\begin_inset Formula $p_{b}$
\end_inset

 gewonnen werden, indem jeder der Wege 
\begin_inset Formula $p_{i},p_{j}$
\end_inset

 bis zu 
\begin_inset Formula $u$
\end_inset

 bzw.
 
\begin_inset Formula $v$
\end_inset

 verfolgt wird, und danach auf den jeweils anderer Weg gewechselt wird.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qedhere{}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align right
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout


\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{1}
\end_layout

\begin_layout Plain Layout


\backslash
SO(1){2}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(0,-5)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=40,d=3]{3}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=140,d=3]{4}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={dotted}} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(0,2)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=-40,d=2]{a}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=-140,d=2]{b}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={draw=none}} 
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=10,d=2]{c}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=-190,d=2]{d}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend right={15}}](b,1,a)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend right={15}}](3,2,4)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={ultra thick}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](4)(2)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend right={15}}](2,1,2)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](2)(3)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](1)(b)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](a)(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={dotted}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](b)(d)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](c)(a)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={thin}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](d)(b)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](a)(c)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "10col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "40col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout


\backslash
GraphInit[vstyle=Hasse]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{1}
\end_layout

\begin_layout Plain Layout


\backslash
SO(1){2}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(0,-5)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=40,d=3]{3}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=140,d=3]{4}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={dotted}} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[shift={(0,2)}]
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=-40,d=2]{a}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=-140,d=2]{b}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={draw=none}} 
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=10,d=2]{c}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[a=-190,d=2]{d}
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend right={15}}](b,1,a)
\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend right={15}}](3,2,4)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
Edges[style={->,bend right={15}}](2,1,2)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](1)(b)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](a)(1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={ultra thick}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](2)(3)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend right={15}}](4)(2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
tikzset{EdgeStyle/.append style={dotted,thin}}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](b)(d)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](c)(a)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](d)(b)
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->,bend left={15}}](a)(c)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Ein Kreis kann weggelassen werden.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beide Fälle von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{menger-lemma-p}.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Conclusion*
Die maximale Anzahl kantendisjunkter 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{G}$
\end_inset

 induziert die maximale Anzahl kantendisjunkter Wege in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Paragraph*
Zu Schritt 2
\end_layout

\begin_layout Standard
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 kann wie folgt in Linearzeit konstruiert werden: Berechne einfache, gerichteten
 Kreise 
\begin_inset Formula $\vec{C}_{1},\dots,\vec{C}_{l}$
\end_inset

, sodass der Graph 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

, der aus 
\begin_inset Formula $\vec{G}$
\end_inset

 entsteht, indem 
\begin_inset Formula $\vec{C}_{1},\dots,\vec{C}_{l}$
\end_inset

 umgedreht werden, folgenden Eigenschaften hat:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 enthält keine Rechtskreise (Kreise, deren Inneres rechts liegt).
\end_layout

\begin_layout Enumerate
Sei 
\begin_inset Formula $\vec{P}_{c}\subseteq\vec{P}_{E}$
\end_inset

 die Menge kantendisjunkter gerichteter 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

.
 Definiere 
\begin_inset Formula $\vec{P}\subseteq\vec{E}$
\end_inset

:
\begin_inset Formula 
\[
\vec{P}\coloneqq\left(\vec{P}_{C}\cap\vec{E}\right)\cup\left\{ \left(u,v\right)\in\vec{E}\mid\left(u,v\right)\text{ auf einem der }\vec{C}_{i}\text{ und }\left(v,u\right)\notin\vec{P}_{C}\right\} 
\]

\end_inset


\begin_inset Formula $\vec{P}$
\end_inset

 ist genau dann eine maximale Menge kantendisjunkter gerichteter 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege, falls 
\begin_inset Formula $\vec{P}_{C}$
\end_inset

 eine maximale Menge kantendisjunkter gerichteter 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{G}_{c}$
\end_inset

 ist.
\end_layout

\begin_layout Remark*
Zu 
\begin_inset Formula $\left(u,v\right)\in\vec{E}$
\end_inset

, 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 auf einem der 
\begin_inset Formula $\vec{C}_{i}$
\end_inset

 wird die entsprechende Kante in 
\begin_inset Formula $\vec{E}_{C}$
\end_inset

 als 
\begin_inset Formula $\left(v,u\right)'$
\end_inset

 bezeichnet, um sie von der 
\begin_inset Quotes gld
\end_inset

eigentlichen
\begin_inset Quotes grd
\end_inset

 Kante 
\begin_inset Formula $\left(v,u\right)\in\vec{E}$
\end_inset

 zu unterscheiden.
\end_layout

\begin_layout Definition
Sei 
\begin_inset Formula $G$
\end_inset

 ein planarer Graph und 
\begin_inset Formula $\mathcal{F}$
\end_inset

 die Facettenmenge einer Einbettung von 
\begin_inset Formula $G$
\end_inset

.
 Hierzu wird der 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Abstand
\end_layout

\end_inset

 
\noun on
Abstand
\noun default
 von 
\begin_inset Formula $f\in\mathcal{F}$
\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $\text{dist}\left(f\right)$
\end_inset

@dist(f)
\end_layout

\end_inset

 
\begin_inset Formula $\dist f$
\end_inset

 zur äußeren Facette 
\begin_inset Formula $f_{0}$
\end_inset

 als Länge eines kürzesten Weges vom Dualknoten von 
\begin_inset Formula $f$
\end_inset

 zum Dualknoten von 
\begin_inset Formula $f_{0}$
\end_inset

 in 
\begin_inset Formula $G^{*}$
\end_inset

 definiert.
\end_layout

\begin_layout Subsubsection*
Konstruktion von 
\begin_inset Formula $C_{1},\dots,C_{l}$
\end_inset

 und 
\begin_inset Formula $\vec{C}_{1},\dots,\vec{C}_{l}$
\end_inset


\end_layout

\begin_layout Standard
Sei 
\begin_inset Formula $\mathcal{\vec{F}}$
\end_inset

 die Facettenmenge von 
\begin_inset Formula $\vec{G}$
\end_inset

 und 
\begin_inset Formula $l\coloneqq\max_{f\in\vec{\mathcal{F}}}\dist f$
\end_inset

.
 Definiere für 
\begin_inset Formula $1\leq i\leq l$
\end_inset

 
\begin_inset Formula $C_{i}$
\end_inset

 als Vereinigung aller einfachen Kreise 
\begin_inset Formula $c$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

, für die gilt: 
\begin_inset Formula 
\begin{align*}
\forall f\in\text{Inneres}\left(c\right) & :\dist f\geq i\\
\forall f\in\text{Äußeres}\left(c\right) & :\dist f<i
\end{align*}

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Konstruktion der 
\begin_inset Formula $\vec{C}_{1},\dots,\vec{C}_{l}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 Dann gilt:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 enthält keine Rechtskreise, da von jedem Rechtskreis in 
\begin_inset Formula $\vec{G}$
\end_inset

 mindestens eine Kante umgedreht wurde.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $k$
\end_inset

 kantendisjunkte, gerichtete 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege 
\begin_inset Formula $\vec{P}_{C}$
\end_inset

 in 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 induzieren 
\begin_inset Formula $k$
\end_inset

 kantendisjunkte gerichtete 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege 
\begin_inset Formula $\vec{P}$
\end_inset

 in 
\begin_inset Formula $\vec{G}$
\end_inset

.
\end_layout

\begin_layout Lemma*
Sei 
\begin_inset Formula $\vec{H}=\left(V_{\vec{H}},E_{\vec{H}}\right)$
\end_inset

 ein gerichteter und zusammenhängender Graph, 
\begin_inset Formula $s,t\in V_{\vec{H}}$
\end_inset

.
 
\begin_inset Formula $\vec{H}$
\end_inset

 besteht aus 
\begin_inset Formula $k$
\end_inset

 gerichteten kantendisjunkten 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wegen genau dann, wenn
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\forall v\in V_{\vec{H}}\backslash\left\{ s,t\right\} :d^{\leftarrow}\left(v\right)=d^{\rightarrow}\left(v\right)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $k=d^{\rightarrow}\left(s\right)-d^{\leftarrow}\left(s\right)=d^{\leftarrow}\left(t\right)-d^{\rightarrow}\left(t\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
\begin_inset Quotes gld
\end_inset

klar
\begin_inset Quotes grd
\end_inset


\end_layout

\begin_layout Standard
Betrachte 
\begin_inset Formula $\vec{P}_{C}$
\end_inset

 und 
\begin_inset Formula $\vec{P}$
\end_inset

, sowie 
\begin_inset Formula $v$
\end_inset

 auf einem 
\begin_inset Formula $\vec{C}_{i}$
\end_inset

 mit 
\begin_inset Formula $\left(v,u\right),\left(w,v\right)$
\end_inset

 auf 
\begin_inset Formula $\vec{C}_{i}$
\end_inset

.
 Offensichtlich ändern sich 
\begin_inset Formula $d^{\rightarrow}\left(s\right)$
\end_inset

 und 
\begin_inset Formula $d^{\leftarrow}\left(v\right)$
\end_inset

 nur für sich beim Übergang von 
\begin_inset Formula $\vec{P}_{C}$
\end_inset

 nach 
\begin_inset Formula $\vec{P}$
\end_inset

 und zwar um den gleichen Betrag, denn:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\left(u,v\right)',\left(v,w\right)'\in\vec{P}_{C} & \iff\left(v,u\right),\left(w,v\right)\notin\vec{P}\\
\left(u,v\right)'\in\vec{P}_{C},\left(v,w\right)'\notin\vec{P}_{C} & \iff\left(v,u\right)\notin\vec{P},\left(w,v\right)\in\vec{P}\\
\left(u,v\right)'\notin\vec{P}_{C},\left(v,w\right)'\in\vec{P}_{C} & \iff\left(v,u\right)\in\vec{P},\left(w,v\right)\notin\vec{P}\\
\left(u,v\right)',\left(v,w\right)'\notin\vec{P}_{C} & \iff\left(v,u\right),\left(w,v\right)\in P
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph*
Zu Schritt 3
\end_layout

\begin_layout Standard
Die maximale Anzahl kantendisjunkter gerichteter 
\begin_inset Formula $s-t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 wird mit einer Right-First-Tiefensuche ermittelt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Formula $\vec{P}_{C}\gets\emptyset$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ForAll{
\end_layout

\end_inset


\begin_inset Formula $i\in\left\{ 1,\dots,r\right\} $
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $l\gets l_{i}$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $p_{i}\gets\left\{ l_{i}\right\} $
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
While{
\end_layout

\end_inset

weder 
\begin_inset Formula $s$
\end_inset

 noch 
\begin_inset Formula $t$
\end_inset

 erreicht
\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
setze 
\begin_inset Formula $v$
\end_inset

 Einlauf Knoten von 
\begin_inset Formula $l$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Wähle 
\begin_inset Formula $l'$
\end_inset

 als rechteste freie aus 
\begin_inset Formula $v$
\end_inset

 auslaufende Kante bezüglich einer 
\begin_inset Quotes gld
\end_inset

Referenzkante
\begin_inset Quotes grd
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $p_{i}\gets p_{i}\cup\left\{ l'\right\} $
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $l\gets l'$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
If{
\end_layout

\end_inset


\begin_inset Formula $p_{i}$
\end_inset

 ist 
\begin_inset Formula $s-t$
\end_inset

-Weg
\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\vec{P}_{C}\gets\vec{P}_{C}\cup p_{i}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Die Right-First-Tiefensuche im 3.
 Schritt von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{algo-menger}
\end_layout

\end_inset

.
 
\begin_inset Formula $l_{1},\dots,l_{r}$
\end_inset

 sind die aus 
\begin_inset Formula $s$
\end_inset

 auslaufenden Kanten.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Dabei gibt es zwei Möglichkeiten für die Referenzkante, also jene Kante,
 die bestimmt, welche Kante am weitesten rechts ist und als nächstes genommen
 werden soll:
\end_layout

\begin_layout Itemize
Die erste Kante über die 
\begin_inset Formula $v$
\end_inset

 jemals erreicht wurde (Version von Coupry)
\end_layout

\begin_layout Itemize
Die Kante über die 
\begin_inset Formula $v$
\end_inset

 aktuell erreicht wurde (Version von Weihe)
\end_layout

\begin_layout Subsubsection*
Korrektheitsbeweis
\end_layout

\begin_layout Claim*
Die Right-First-Prozedur berechnet die maximale Anzahl kantentdisjunkter
 gerichteter 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

.
 
\end_layout

\begin_layout Proof
Es wird die Right-First-Prozedur in der Version von Weihe betrachtet.
 Da 
\begin_inset Formula $\forall v\in\vec{V}_{C}:d^{\rightarrow}\left(v\right)=d^{\leftarrow}\left(v\right)$
\end_inset

 gilt, endet jede der Right-First-Suchen entweder bei 
\begin_inset Formula $t$
\end_inset

 oder nach einem Linkskreis bei 
\begin_inset Formula $s$
\end_inset

.
 Gilt 
\begin_inset Formula $k=d^{\rightarrow}\left(s\right)$
\end_inset

 ist die Behauptung offensichtlich.
\end_layout

\begin_layout Proof
Sei also 
\begin_inset Formula $k<d^{\rightarrow}\left(s\right)$
\end_inset

.
 Zum Beweis wird der Satz von Menger verwendet.
 Für 
\begin_inset Formula $k$
\end_inset

 gefundene 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege wird gezeigt, dass es in 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 einen 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Schnitt gibt, der genau 
\begin_inset Formula $k$
\end_inset

 
\begin_inset Quotes gld
\end_inset

von 
\begin_inset Formula $s$
\end_inset

 nach 
\begin_inset Formula $t$
\end_inset

 gerichtete Kanten
\begin_inset Quotes grd
\end_inset

 enthält.
 Seien 
\begin_inset Formula $p_{1},\dots,p_{r}$
\end_inset

 die durch die Right-First-Prozedur berechneten Linkskreise und 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege.
 Es wird ein Kreis 
\begin_inset Formula $\vec{\mathcal{K}}$
\end_inset

 in 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 konstruiert, sodass
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $s\in\text{Inneres}\left(\vec{\mathcal{K}}\right)$
\end_inset

 oder 
\begin_inset Formula $s\in\vec{\mathcal{K}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $t\in\text{Äußeres}\left(\vec{K}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
für 
\begin_inset Formula $A\coloneqq\left\{ \left(u,v\right)\in\vec{E}_{C}\mid u\text{ auf }\vec{\mathcal{K}}\text{ und }v\in\text{Äußeres}\left(\vec{K}\right)\right\} $
\end_inset

 gilt 
\begin_inset Formula $\left|A\right|=k$
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Hierzu sei 
\begin_inset Formula $\left(v,s\right)$
\end_inset

 eine beliebige von 
\begin_inset Formula $p_{1},\dots,p_{r}$
\end_inset

 besetzte, links einlaufende Kante.
 Nach Voraussetzung existiert diese.
 Führe von 
\begin_inset Formula $\left(v,s\right)$
\end_inset

 aus eine rückwärts gerichtete Links-First-Prozedur im durch 
\begin_inset Formula $p_{1},\dots,p_{n}$
\end_inset

 induzierten Subgraph von 
\begin_inset Formula $\vec{G}_{C}$
\end_inset

 aus.
 Wähle dazu jeweils nach 
\begin_inset Formula $\left(v_{i},v_{i-1}\right)$
\end_inset

 als nächstes die im Uhrzeigersinn nächste einlaufende Kante in der Adjazenzlist
e von 
\begin_inset Formula $v_{i}$
\end_inset

 als 
\begin_inset Formula $\left(v_{i+1},v_{i}\right)$
\end_inset

.
 
\begin_inset Formula $\vec{\mathcal{K}}$
\end_inset

 ist dann die Folge von Kanten 
\begin_inset Formula $\left(v_{r},v_{r-1}\right),\dots,\left(v_{1},v_{0}\right)$
\end_inset

.
 Entweder ist 
\begin_inset Formula $v_{r}=s=v_{0}$
\end_inset

 oder 
\begin_inset Formula $v_{r}=v_{0}$
\end_inset

 und 
\begin_inset Formula $s\in\text{Inneres}\left(\vec{\mathcal{K}}\right)$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Lemma*
Jede Kante 
\begin_inset Formula $\left(u,v\right)\in\vec{E}_{C}$
\end_inset

 mit 
\begin_inset Formula $u$
\end_inset

 auf 
\begin_inset Formula $\vec{\mathcal{K}}$
\end_inset

 und 
\begin_inset Formula $v\in\text{Äußeres}\left(\vec{\mathcal{K}}\right)$
\end_inset

 führt zu einem der 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege aus 
\begin_inset Formula $\vec{P}_{C}$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
smallqed
\end_layout

\end_inset


\begin_inset Formula $p_{1},\dots,p_{r}$
\end_inset

 seien die 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege und Linkskreise.
 Aufgrund der Konstruktion von 
\begin_inset Formula $\vec{\mathcal{K}}$
\end_inset

 kann es keine Kante geben, die auf einem der 
\begin_inset Formula $p_{1},\dots,p_{r}$
\end_inset

 liegt und von Außen auf 
\begin_inset Formula $\vec{\mathcal{K}}$
\end_inset

 zeigt.
 Insofern kann es aber auch keine Kante 
\begin_inset Formula $\left(x,y\right)$
\end_inset

 geben, die auf einem Linkskreis in 
\begin_inset Formula $p_{1},\dots,p_{r}$
\end_inset

 liegt und aus 
\begin_inset Formula $\vec{K}$
\end_inset

 heraus führt.
\end_layout

\begin_layout Proof
Betrachte 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 mit 
\begin_inset Formula $u$
\end_inset

 auf 
\begin_inset Formula $\vec{\mathcal{K}}$
\end_inset

 und 
\begin_inset Formula $v\in\text{Äußeres}\left(\vec{\mathcal{K}}\right)$
\end_inset

 und 
\begin_inset Formula $\left(u,w\right)\in\vec{\mathcal{K}}$
\end_inset

.
 Die Referenzkante zu 
\begin_inset Formula $\left(u,w\right)$
\end_inset

 liegt entweder auf 
\begin_inset Formula $\vec{\mathcal{K}}$
\end_inset

 oder zeigt aus 
\begin_inset Formula $\text{Inneres}\left(\vec{\mathcal{K}}\right)$
\end_inset

 nach 
\begin_inset Formula $u$
\end_inset

.
 Bei der Right-First-Prozedur müsste dann 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 vor 
\begin_inset Formula $\left(u,w\right)$
\end_inset

 von der Referenzkante aus gewählt worden sein, also liegt 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 auf einem der 
\begin_inset Formula $p_{i}$
\end_inset

.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qedhere
\end_layout

\end_inset


\end_layout

\begin_layout Conclusion*
\begin_inset Formula $\left|A\right|=k\coloneqq$
\end_inset

 Anzahl der 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{P}_{C}$
\end_inset

.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
qedhere
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Knotendisjunktes Menger-Problem
\end_layout

\begin_layout Standard
Aus dem Satz von Menger ergibt sich, dass die maximale Anzahl knotendisjunkter
 
\begin_inset Formula $s-t$
\end_inset

-Wege genau dann 
\begin_inset Formula $k$
\end_inset

 ist, wenn die Kardinalität eines minimalen Separators, der 
\begin_inset Formula $s$
\end_inset

 und 
\begin_inset Formula $t$
\end_inset

 trennt, 
\begin_inset Formula $k$
\end_inset

 ist.
\end_layout

\begin_layout Standard
Sei 
\begin_inset Formula $G$
\end_inset

 planar.
 Ohne Beschränkung der Allgemeinheit sei 
\begin_inset Formula $G$
\end_inset

 so planar eingebettet, dass 
\begin_inset Formula $t$
\end_inset

 auf der äußeren Facette liegt.
\end_layout

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Knotendisjunktes Menger-Problem auf planaren Graphen
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Transformiere 
\begin_inset Formula $G$
\end_inset

 zu 
\begin_inset Formula $\vec{G}$
\end_inset

, indem jede ungerichtete Kante 
\begin_inset Formula $\left\{ u,v\right\} ,u,v\notin\left\{ s,t\right\} $
\end_inset

 durch die gerichteten Kanten 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 und 
\begin_inset Formula $\left(v,u\right)$
\end_inset

ersetzt wird.
 Alle Kanten 
\begin_inset Formula $\left\{ s,x\right\} $
\end_inset

werden nur durch 
\begin_inset Formula $\left(s,x\right)$
\end_inset

 und alle Kanten 
\begin_inset Formula $\left\{ t,x\right\} $
\end_inset

 werden nur durch 
\begin_inset Formula $\left(x,t\right)$
\end_inset

 ersetzt.
 Sind 
\begin_inset Formula $\vec{p}_{1},\dots,\vec{p}_{l}$
\end_inset

 knotendisjunkte 
\begin_inset Formula $s-t$
\end_inset

-Wege in 
\begin_inset Formula $\vec{G}$
\end_inset

, so induzieren diese direkt knotendisjunkte 
\begin_inset Formula $s-t$
\end_inset

-Wege 
\begin_inset Formula $p_{1},\dots,p_{n}$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Enumerate
Seien 
\begin_inset Formula $E_{S}:=\left(s,v_{1}\right),\dots,\left(s,v_{r}\right)\in\vec{E}$
\end_inset

 alle aus 
\begin_inset Formula $s$
\end_inset

 auslaufenden Kanten.
 Iteriere über 
\begin_inset Formula $E_{S}$
\end_inset

, wobei jeweils von 
\begin_inset Formula $\left(s,v_{i}\right)$
\end_inset

 aus jeweils eine Right-First-Tiefensuche durchgeführt wird.
 
\begin_inset Quotes gld
\end_inset

Konflikte
\begin_inset Quotes grd
\end_inset

, das heißt Auftreffen der Suche auf besetzte Knoten werden geeignet aufgelöst
 und induzieren den 
\begin_inset Quotes gld
\end_inset

backtrack-remove
\begin_inset Quotes grd
\end_inset

-Schritt.
 Falls keine auslaufende freie Kante existiert, wird ebenfalls der 
\begin_inset Quotes gld
\end_inset

backtrack-remove
\begin_inset Quotes grd
\end_inset

-Schritt ausgeführt.
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\rightsquigarrow$
\end_inset

Die Right-First-Tiefensuche endet bei 
\begin_inset Formula $t$
\end_inset

 oder bei 
\begin_inset Formula $s$
\end_inset

 (nach backtrack-remove).
\end_layout

\end_deeper
\begin_layout Subsubsection*
Behandlung von Konflikten
\end_layout

\begin_layout Subparagraph
Konflikt von links:
\end_layout

\begin_layout Standard
Trifft der aktuelle Suchweg von links auf einen besetzten Knoten 
\begin_inset Formula $v$
\end_inset

, so wird ein 
\begin_inset Quotes gld
\end_inset

backtrack-remove
\begin_inset Quotes grd
\end_inset

-Schritt ausgeführt, es wird also die letzte Kante vom Suchweg und aus 
\begin_inset Formula $\vec{G}$
\end_inset

 entfernt.
\end_layout

\begin_layout Subparagraph
Konflikt von rechts:
\end_layout

\begin_layout Standard
Nun trifft der aktuelle Suchweg von rechts auf einen besetzten Knoten 
\begin_inset Formula $v$
\end_inset

.
 Sei 
\begin_inset Formula $p$
\end_inset

 der 
\begin_inset Formula $s-t$
\end_inset

-Weg, der 
\begin_inset Formula $v$
\end_inset

 besetst.
 Sei 
\begin_inset Formula $p_{1}\subset p$
\end_inset

 der Teilweg von 
\begin_inset Formula $s$
\end_inset

 nach 
\begin_inset Formula $v$
\end_inset

, zu dem die besetzte, in 
\begin_inset Formula $v$
\end_inset

 einlaufende Kante gehört und 
\begin_inset Formula $p_{2}\subset p$
\end_inset

 der Teilweg von 
\begin_inset Formula $v$
\end_inset

 nach 
\begin_inset Formula $t$
\end_inset

, zu dem die besetzte, aus 
\begin_inset Formula $v$
\end_inset

 auslaufende Kante gehört.
 Sei 
\begin_inset Formula $q$
\end_inset

 der aktuelle Suchweg.
 
\begin_inset Formula $q$
\end_inset

 und 
\begin_inset Formula $p_{2}$
\end_inset

 wird nun zu einem 
\begin_inset Formula $s$
\end_inset

-
\begin_inset Formula $t$
\end_inset

-Weg kombiniert, der 
\begin_inset Formula $p$
\end_inset

 ersetzt.
 
\begin_inset Formula $p_{1}$
\end_inset

 wird zum aktuellen Suchweg.
 
\begin_inset Formula $p_{1}$
\end_inset

 hat nun einen Konflikt von links, der wie oben behandelt wird.
\end_layout

\begin_layout Standard
Die Auflösung eines Konflikts von rechts ist nur dann sinnvoll, falls die
 Kanten, die den Konfliktknoten 
\begin_inset Formula $v$
\end_inset

 besetzen, nicht zum aktuellen Suchweg 
\begin_inset Formula $q$
\end_inset

 gehören.
 Dies könnte auftreten, falls der Algorithmus einen Rechtskreis durchläuft.
 Der Algorithmus ist daher so angelegt, dass er niemals einen Rechtskreis
 durchläuft.
 Hierzu werden zwei 
\begin_inset Quotes gld
\end_inset

Tricks
\begin_inset Quotes grd
\end_inset

 verwendet.
\end_layout

\begin_layout Subparagraph
Erster Trick:
\end_layout

\begin_layout Standard
Man kann zeigen, dass für eine Kante 
\begin_inset Formula $\left(v,w\right)$
\end_inset

, nach der der Suchweg einen Rechtskreis mit anschließendem Konflikt von
 rechts in 
\begin_inset Formula $v$
\end_inset

 durchläuft, bereits zu einem früheren Zeitpunkt die Kante 
\begin_inset Formula $\left(w,v\right)$
\end_inset

 in einem Linkskreis durchlaufen wurde.
 Daher wird vom Algorithmus eine Kante 
\begin_inset Formula $\left(v,w\right)$
\end_inset

 entfernt, falls sie als nächste Kante des aktuellen Suchwegs gewählt würde,
 
\begin_inset Formula $\left(w,v\right)$
\end_inset

 aber vom aktuellen Suchweg bereits belegt wurde.
\end_layout

\begin_layout Standard
Damit dieser Trick ausgeführt werden kann, muss für jede Kante bekannt sein,
 ob sie auf dem aktuellen Suchweg liegt.
 Allerdings kann sich die Zugehörigkeit von Kanten zu Wegen im Zuge der
 Auflösung eines Konflikts von rechts ändern.
 Alle betroffenen Kanten bei solch einem Konflikt zu aktualisieren würde
 allerdings zu einer quadratischen Laufzeit des Algorithmus führen.
\end_layout

\begin_layout Subparagraph
Zweiter Trick:
\end_layout

\begin_layout Standard
Es wird ein globaler Zähler eingeführt.
 Dieser wird immer dann erhöht, wenn ein neuer Suchweg begonnen wird oder
 die Suchwege zur Auflösung eines Konflikts von rechts umorganisiert werden.
 Wird ein Knoten vom aktuellen Suchweg belegt, so erhält er den aktuellen
 Stand des Zählers als 
\begin_inset Quotes gld
\end_inset

Zeitstempel
\begin_inset Quotes grd
\end_inset

.
 Eine Kante 
\begin_inset Formula $\left(w,v\right)$
\end_inset

 ist somit genau dann bereits zuvor vom aktuellen Suchweg gewählt worden,
 falls der Zeitstempel von 
\begin_inset Formula $v$
\end_inset

 identisch zu jenem von 
\begin_inset Formula $w$
\end_inset

 ist.
\end_layout

\begin_layout Chapter
Das Problem von Okamura und Seymour
\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Kantendisjunktes Wegpackungsproblem
\end_layout

\end_inset


\end_layout

\begin_layout Problem
Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und eine Menge an 
\begin_inset Formula $k$
\end_inset

 ausgezeichneten Knotenpaaren 
\begin_inset Formula $D\coloneqq\left\{ \left\{ s_{i},t_{i}\right\} \subseteq V\mid1\leq i\leq k\right\} $
\end_inset

 (wobei 
\begin_inset Formula $s_{i}$
\end_inset

 und 
\begin_inset Formula $t_{i}$
\end_inset

 nicht notwendigerweise verschieden sind).
 Finde paarweise kantendisjunkte 
\begin_inset Formula $s_{i}$
\end_inset

-
\begin_inset Formula $t_{i}$
\end_inset

-Wege für 
\begin_inset Formula $1\leq i\leq k$
\end_inset

.
 
\begin_inset Formula $s_{i},t_{i}$
\end_inset

 heißen 
\noun on
Terminale
\noun default
, Paare 
\begin_inset Formula $\left\{ s_{i},t_{i}\right\} $
\end_inset

 heißen auch 
\noun on
Netze
\noun default
.
\end_layout

\begin_layout Standard
Das Problem ist, auch wenn 
\begin_inset Formula $G$
\end_inset

 planar ist, 
\begin_inset Formula $\NP$
\end_inset

-schwer.
 Folgende Einschränkungen sind sinnvoll:
\end_layout

\begin_layout Itemize
\begin_inset Formula $s_{i},t_{i}$
\end_inset

 müssen für 
\begin_inset Formula $1\leq i\leq k$
\end_inset

 auf dem Rand derselben Facette (o.B.d.A.
 die äußere Facette) liegen.
\end_layout

\begin_layout Itemize
Sei 
\begin_inset Formula $D\coloneqq\left\{ \left\{ s_{1},t_{1}\right\} ,\dots,\left\{ s_{k},t_{k}\right\} \right\} $
\end_inset

 (
\begin_inset Formula $\hat{=}$
\end_inset

 Menge der 
\begin_inset Quotes gld
\end_inset

Demand-Kanten
\begin_inset Quotes grd
\end_inset

).
 
\begin_inset Formula $G+D\coloneqq\left(V,E\cup D\right)$
\end_inset

 muss planar sein.
\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Kapazität
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $\text{cap}\left(X\right)$
\end_inset

@cap(X)
\end_layout

\end_inset

Sei 
\begin_inset Formula $G=\left(V,E\right),X\subseteq V$
\end_inset

.
 Dann heißt
\begin_inset Formula 
\[
\text{cap}\left(X\right)\coloneqq\left|\left\{ \left\{ u,v\right\} \in E\mid u\in X,v\in V\backslash X\right\} \right|
\]

\end_inset


\noun on
Kapazität
\noun default
 von 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\begin_layout Definition
Sei 
\begin_inset Formula $D\coloneqq\left\{ \left\{ s_{i},t_{i}\right\} \subseteq V\mid1\leq i\leq k\right\} $
\end_inset

 gegeben.
 Dann heißt
\begin_inset Formula 
\[
\text{dens}\left(X\right)\coloneqq\left|\left\{ \left\{ s_{i},t_{i}\right\} \in D\mid\left|\left\{ s_{i},t_{i}\right\} \cap X\right|=1\right\} \right|
\]

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Dichte
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $\text{dens}\left(X\right)$
\end_inset

@dens(X)
\end_layout

\end_inset


\noun on
Dichte
\noun default
 von 
\begin_inset Formula $X$
\end_inset

 und
\begin_inset Formula 
\[
\text{fcap}\left(X\right)\coloneqq\text{cap}\left(X\right)-\text{dens}\left(X\right)
\]

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Kapazität!freie
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $\text{fcap}\left(X\right)$
\end_inset

@fcap(X)
\end_layout

\end_inset

 
\noun on
freie Kapazität
\noun default
 von 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\begin_layout Standard
Eine notwendige Bedingung für die Lösbarkeit des kantendisjunktes Wegpackungspro
blems ist 
\begin_inset Formula 
\[
\forall X\subset V:\text{fcap}\left(X\right)\geq0
\]

\end_inset

Im Falle 
\begin_inset Formula $\text{fcap}\left(X\right)=0$
\end_inset

 heißt 
\begin_inset Formula $X$
\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
saturiert
\end_layout

\end_inset


\noun on
saturiert
\noun default
, im Falle 
\begin_inset Formula $\text{fcap}\left(X\right)\leq0$
\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
übersaturiert
\end_layout

\end_inset


\noun on
übersaturiert
\noun default
.
 Diese Bedingung ist allerdings nicht hinreichend.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex[L={s_1}]{1}
\end_layout

\begin_layout Plain Layout


\backslash
EA[L={s_2}](1){2}
\end_layout

\begin_layout Plain Layout


\backslash
SO[L={t_1}](2){3}
\end_layout

\begin_layout Plain Layout


\backslash
WE[L={t_2}](3){4}
\end_layout

\begin_layout Plain Layout


\backslash
Edges(1,2,3,4,1)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Es gibt Graphen mit 
\begin_inset Formula $\forall X\subset V:\:\text{fcap}\left(X\right)\ge0$
\end_inset

, für die das kantendisjunkte Wegpackungsproblem nicht lösbar ist.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Index idx
status open

\begin_layout Plain Layout
Geradheitsbedingung
\end_layout

\end_inset

Ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 mit einer Menge an ausgezeichneten Knotenpaaren 
\begin_inset Formula $D\coloneqq\left\{ \left\{ s_{i},t_{i}\right\} \subseteq V\mid1\leq i\leq k\right\} $
\end_inset

 erfüllt die 
\noun on
Geradheitsbedingung
\noun default
, falls
\begin_inset Formula 
\[
\forall X\subset V:\text{fcap}\left(X\right)\text{ ist gerade}
\]

\end_inset


\end_layout

\begin_layout Problem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Okamura-Seymour Problem
\end_layout

\end_inset

 Gegeben ein Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und eine Menge an 
\begin_inset Formula $k$
\end_inset

 ausgezeichneten Knotenpaaren 
\begin_inset Formula $D\coloneqq\left\{ \left\{ s_{i},t_{i}\right\} \subseteq V\mid1\leq i\leq k\right\} $
\end_inset

 (wobei 
\begin_inset Formula $s_{i}$
\end_inset

 und 
\begin_inset Formula $t_{i}$
\end_inset

 nicht notwendigerweise verschieden sind).
 
\begin_inset Formula $G$
\end_inset

 lasse sich so planar einbetten, dass 
\begin_inset Formula $s_{i},t_{i}$
\end_inset

 
\begin_inset Formula $\forall1\leq i\leq k$
\end_inset

 auf der äußeren Facette liegen.
 Erfülle 
\begin_inset Formula $G$
\end_inset

 die Geradheitsbedingung.
 Finde paarweise kantendisjunkte 
\begin_inset Formula $s_{i}-t_{i}$
\end_inset

-Wege für 
\begin_inset Formula $1\leq i\leq k$
\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Satz von Okamura und Seymour
\end_layout

\end_inset

 Eine Instanz des Okamura-Seymour-Problems ist genau dann lösbar, wenn die
 Kapazitätsbedingung erfüllt ist.
\end_layout

\begin_layout Standard
Der Beweis wird durch den Korrektheitsbeweis von 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thref{l-o-s}
\end_layout

\end_inset

 geführt.
\end_layout

\begin_layout Lemma*
Gegeben ein planarer Graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und 
\begin_inset Formula $D\coloneqq\left\{ \left\{ s_{i},t_{i}\right\} \subseteq V\mid1\leq i\leq k\right\} $
\end_inset

 gilt:
\begin_inset Formula 
\[
\forall X\subseteq V:\text{fcap}\left(X\right)\text{ gerade}\iff\forall v\in V:\text{fcap}\left(\left\{ v\right\} \right)\text{ gerade}
\]

\end_inset


\end_layout

\begin_layout Proof
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Paragraph*
\begin_inset Quotes gld
\end_inset


\begin_inset Formula $\boldsymbol{\implies}$
\end_inset


\begin_inset Quotes grd
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
klar.
\end_layout

\begin_deeper
\begin_layout Paragraph*
\begin_inset Quotes gld
\end_inset


\begin_inset Formula $\boldsymbol{\impliedby}$
\end_inset


\begin_inset Quotes grd
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Sei 
\begin_inset Formula $\forall v\in V$
\end_inset

 
\begin_inset Formula $\text{fcap}\left(\left\{ v\right\} \right)$
\end_inset

 gerade.
 Sei 
\begin_inset Formula $X\subseteq V$
\end_inset

.
 Dann:
\begin_inset Formula 
\begin{align*}
\text{cap}\left(X\right) & =\sum_{v\in X}\text{cap}\left(\left\{ v\right\} \right)-2\left|\left\{ \left\{ u,v\right\} \in E\mid u,v\in X\right\} \right|\\
\text{dens}\left(X\right) & =\sum_{v\in X}\text{dens}\left(\left\{ x\right\} \right)-2\left|\left\{ \left\{ s_{i},t_{i}\right\} \in D\mid s_{i},t_{i}\in X\right\} \right|
\end{align*}

\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula 
\begin{align*}
\implies\text{fcap}\left(X\right) & =\sum_{v\in X}\text{cap}\left(\left\{ v\right\} \right)-2\left|\left\{ \left\{ u,v\right\} \in E\mid u,v\in X\right\} \right|\\
 & \hfill\qquad-\sum_{v\in X}\text{dens}\left(\left\{ x\right\} \right)-2\left|\left\{ \left\{ s_{i},t_{i}\right\} \in D\mid s_{i},t_{i}\in X\right\} \right|\\
 & =\sum_{v\in X}\text{fcap}\left(\left\{ v\right\} \right)-2\left(\left|\left\{ \left\{ u,v\right\} \in E\mid u,v\in X\right\} \right|+\left|\left\{ \left\{ s_{i},t_{i}\right\} \in D\mid s_{i},t_{i}\in X\right\} \right|\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Proof
Da nach Voraussetzung alle 
\begin_inset Formula $\text{fcap}\left(\left\{ v\right\} \right)$
\end_inset

 gerade sind, folgt die Behauptung.
\end_layout

\begin_layout Algorithm
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Linearzeitalgorithmus für das Okamura-Seymour Problem
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thlabel{l-o-s}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Konstruiere aus 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 und 
\begin_inset Formula $D=\left\{ \left\{ s_{1},t_{1}\right\} ,\dots,\left\{ s_{k},t_{k}\right\} \right\} $
\end_inset

 eine 
\begin_inset Quotes gld
\end_inset

einfachere
\begin_inset Quotes grd
\end_inset

 Instanz mit 
\begin_inset Formula $D'=\left\{ \left\{ s_{1}',t_{1}'\right\} ,\dots,\left\{ s_{k}',t_{k}'\right\} \right\} $
\end_inset

.
\end_layout

\begin_layout Enumerate
Berechne in 
\begin_inset Formula $\O n$
\end_inset

 paarweise kantendisjunkte (orientierte) 
\begin_inset Formula $s_{i}'$
\end_inset

-
\begin_inset Formula $t_{i}'$
\end_inset

-Wege, also eine Lösung zu 
\begin_inset Formula $D'$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
 Dies induziert einen gerichteten Hilfsgraphen 
\begin_inset Formula $\vec{G}=\left(\vec{V},\vec{E}\right)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Berechne in 
\begin_inset Formula $\O n$
\end_inset

 in 
\begin_inset Formula $\vec{G}$
\end_inset

 eine Lösung zu 
\begin_inset Formula $D$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Subsubsection*
Zu Schritt 1
\end_layout

\begin_layout Standard
\begin_inset Formula $D'$
\end_inset

 entsteht aus 
\begin_inset Formula $D$
\end_inset

 indem die 
\begin_inset Formula $s_{i},t_{i}$
\end_inset

 neu gepaart werden, sodass 
\begin_inset Formula $\left\{ s_{1},\dots,s_{k},t_{1},\dots,t_{k}\right\} =\left\{ s_{1}',\dots,s_{k}',t_{1}',\dots,t_{k}'\right\} $
\end_inset

.
 Die neuen Paarungen 
\begin_inset Formula $\left\{ s_{i}',t_{i}'\right\} $
\end_inset

 haben dabei eine 
\begin_inset Quotes gld
\end_inset

Klammerstruktur
\begin_inset Quotes grd
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Zu Schritt 2
\end_layout

\begin_layout Standard
Man kann beobachten, dass sich weder zwei 
\begin_inset Formula $s_{i}'-t_{i}'$
\end_inset

-Wege kreuzen noch sich ein 
\begin_inset Formula $s_{i}'-t_{i}'$
\end_inset

-Weg mit sich selbst kreuzt.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
SetGraphUnit{2}
\end_layout

\begin_layout Plain Layout


\backslash
Vertex{v}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{VertexStyle/.append style={draw=none}} 
\end_layout

\begin_layout Plain Layout


\backslash
Vertices[NoLabel]{circle}{1,2,3,4}
\end_layout

\begin_layout Plain Layout


\backslash
Edge[style={->}](1)(v)
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Widerspruch zur RF-Suche.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Lemma*
\begin_inset Formula $\vec{G}$
\end_inset

 enthält keinen Rechtskreis.
\end_layout

\begin_layout Proof
Angenommen, 
\begin_inset Formula $\vec{G}$
\end_inset

 enthält einen Rechtskreis 
\begin_inset Formula $\vec{C}$
\end_inset

.
 Seine Struktur stünde jedoch im Widerspruch zur Klammerung.
\end_layout

\begin_layout Paragraph*
Korrektheitsbeweis des zweiten Schritts
\end_layout

\begin_layout Claim*
Für eine wie in Schritt 1 konstruierte, lösbare Instanz des Okamura-Seymour-Prob
lems 
\begin_inset Formula $\left(G=\left(V,E\right),D'=\left\{ \left\{ s_{i}',t_{i}'\right\} \subseteq V\mid1\leq i\leq k\right\} \right)$
\end_inset

 findet Schritt 2 Wege 
\begin_inset Formula $q_{1},\dots,q_{k}$
\end_inset

, die jeweils 
\begin_inset Formula $s_{i}'$
\end_inset

 mit 
\begin_inset Formula $t_{i}'$
\end_inset

 verbinden.
\end_layout

\begin_layout Proof
Sei 
\begin_inset Formula $q_{1}',\dots,q_{k}'$
\end_inset

 eine beliebige kreuzungsfreie Lösung der Instanz 
\begin_inset Formula $\left(G,D'\right)$
\end_inset

.
 Induktiv über 
\begin_inset Formula $i$
\end_inset

 gilt für jedes von der Right-First-Prozedur gefundene 
\begin_inset Formula $q_{i}$
\end_inset

, dass die linke Seite von 
\begin_inset Formula $q_{i}'$
\end_inset

 ganz in der linken Seite von 
\begin_inset Formula $q_{i}$
\end_inset

 enthalten ist.
 Dies liegt daran, dass per Right-First-Regel ausgewählt wurde und die Klammer-P
aarungen der 
\begin_inset Formula $s_{i}',t_{i}'$
\end_inset

 von innen nach außen abgearbeitet wurden.
 Deshalb muss 
\begin_inset Formula $q_{i}$
\end_inset

 gerade 
\begin_inset Formula $s_{i}'$
\end_inset

 mit 
\begin_inset Formula $t_{i}'$
\end_inset

 verbinden.
\end_layout

\begin_layout Standard
Die Linearzeit von Schritt 2 ist offensichtlich.
\end_layout

\begin_layout Subsubsection*
Ausführung von Schritt 3
\end_layout

\begin_layout Standard
Führe eine Right-First-Suche auf 
\begin_inset Formula $\vec{G}$
\end_inset

 aus.
 Dabei werden die 
\begin_inset Formula $\left\{ s_{i},t_{i}\right\} $
\end_inset

 so indiziert, dass 
\begin_inset Formula $s_{i}$
\end_inset

 vor 
\begin_inset Formula $t_{i}$
\end_inset

 und 
\begin_inset Formula $t_{i}$
\end_inset

 vor 
\begin_inset Formula $t_{i+1}$
\end_inset

 als Startterminal.
\end_layout

\begin_layout Paragraph
Korrektheitsbeweis des dritten Schritts
\end_layout

\begin_layout Standard
Da in 
\begin_inset Formula $\vec{G}$
\end_inset

 alle Knoten gleichen Ein- wie Ausgangsgrad haben, endet eine Right-First-Tiefen
suche von einem 
\begin_inset Formula $s_{i}$
\end_inset

 immer bei einem 
\begin_inset Formula $t_{j}$
\end_inset

.
\end_layout

\begin_layout Claim*
Eine Right-First-Suche wie in Schritt 3, die bei 
\begin_inset Formula $s_{i}$
\end_inset

 beginnt, endet nur dann in 
\begin_inset Formula $t_{j}$
\end_inset

 
\begin_inset Formula $i\neq j$
\end_inset

, wenn es einen Schnitt 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

 gibt mit 
\begin_inset Formula $\text{fcap}\left(X\right)<0$
\end_inset

.
\end_layout

\begin_layout Proof
Prozedur, die auf Basis von 
\begin_inset Formula $p_{1},\dots,p_{i}$
\end_inset

, 
\begin_inset Formula $i\leq k$
\end_inset

, die nach der 
\begin_inset Formula $i$
\end_inset

-ten Right-First-Suche in Schritt 3 gefunden wurden, einen Schnitt 
\begin_inset Formula $X$
\end_inset

 konstruiert, für den gilt:
\end_layout

\begin_deeper
\begin_layout Enumerate
falls 
\begin_inset Formula $p_{1},\dots,p_{i}$
\end_inset

 jeweils 
\begin_inset Formula $s_{j}-t_{j}$
\end_inset

-Wege, 
\begin_inset Formula $\forall1\leq j\leq i$
\end_inset

, so ist 
\begin_inset Formula $\text{fcap}\left(X\right)=0$
\end_inset


\end_layout

\begin_layout Enumerate
falls 
\begin_inset Formula $p_{i}$
\end_inset

 
\begin_inset Formula $s_{i}$
\end_inset

 mit 
\begin_inset Formula $t_{j}$
\end_inset

, 
\begin_inset Formula $i\neq j$
\end_inset

, verbindet, so ist 
\begin_inset Formula $\text{fcap}\left(X\right)<0$
\end_inset

.
\end_layout

\begin_layout Algorithm*
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Schnitt-Prozedur
\end_layout

\end_inset


\end_layout

\begin_layout Algorithm*
Rückwärts-Left-First-Suche beginnt bei einem 
\begin_inset Formula $t$
\end_inset

-Terminal in dem durch die bisherige Suche in Schritt 3 induzierten Graph.
 Wurden bisher also 
\begin_inset Formula $i$
\end_inset

 Suchen durchgeführt, wird in dem durch 
\begin_inset Formula $p_{1},\dots,p_{i}$
\end_inset

 induzierten Graphen gesucht.
 Die Suche induziert einen Weg 
\begin_inset Formula $P$
\end_inset

 vom 
\begin_inset Formula $t$
\end_inset

-Terminal, bei dem begonnen wurde, zu einem 
\begin_inset Formula $s$
\end_inset

-Terminal.
 
\begin_inset Formula $P$
\end_inset

 und alles links von 
\begin_inset Formula $P$
\end_inset

 induziert den Schnitt 
\begin_inset Formula $X\subset V$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Proof
Betrachte den Schnitt 
\begin_inset Formula $X$
\end_inset

 und die Kanten, die über 
\begin_inset Formula $X$
\end_inset

 gehen.
 
\begin_inset Formula 
\begin{align*}
\text{cap}\left(X\right) & =\left|\left\{ \left\{ s_{j},t_{j}\right\} \mid s_{j}\in X,t_{j}\in V\backslash X,1\leq j\leq i\right\} \right|+\left|\left\{ \left\{ s_{j}',t_{j}'\right\} \mid s_{j}'\in V\backslash X,t_{j}'\in X,1\leq i\leq j,\left\{ s_{j}',t_{j}'\right\} \not\subseteq\left\{ s_{1},\dots,s_{i},t_{1},\dots,t_{i}\right\} \right\} \right|+1\\
 & =\text{dens}\left(X\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Paragraph*
Laufzeit
\end_layout

\begin_layout Standard
\begin_inset Formula $\O n$
\end_inset

 mit Union-Find wie im kantendisjunkten Menger-Problem in der Version von
 Weihe.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\backslash
pagenumbering{gobble}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
